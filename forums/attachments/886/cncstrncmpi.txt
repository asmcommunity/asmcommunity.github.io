int xstrncmpi(char* wthis,char * wthat,int len)
    {
    int t=-1;
__asm
    {
    
mov eax, len 
mov esi, wthis
mov edi, wthat
push ebp
shr eax,2
or eax,eax
je L2
mov ecx,eax
xor edx,edx
jmp L1
L1aa:
xor ebp,ebp
L1a:
movzx eax, word ptr [esi+ebp]
movzx ebx, word ptr [edi+ebp]

cmp al,0x61
jl L1ac
cmp al,0x7a
jg L1ac 
sub al,0x20
//cap
L1ac:
cmp bl,0x61
jl L1ab
cmp bl,0x7a
jg L1ab
sub bl,0x20
L1ab:
cmp al,bl
jne endf

cmp ah,0x61
jl L1ac2
cmp ah,0x7a
jg L1ac2
sub ah,0x20
//cap
L1ac2:
cmp bh,0x61
jl L1ab2
cmp bh,0x7a
jg L1ab2
sub bh,0x20
L1ab2:
cmp ah,bh
jne endf
inc ebp//inc on amd pairs better imho//add ebp,2  // use add for intel cpus. 
inc ebp
cmp ebp,4
jl L1a
add esi,4
add edi,4
cmp edx,ecx
jae L2

L1:
mov eax, dword ptr [esi]
inc edx//prevents 2 clock stall per ilt.
mov ebx, dword ptr [edi]
cmp eax,ebx
//cmp eax, dword ptr [edi] // not really a diffrence in speed if done this way. imho
jne L1aa
add esi,4
add edi,4
cmp edx,ecx
jb L1

L2:
pop ebp//restore frame
mov eax, len 
push ebp
shl eax,30//faster then div i hope?
shr eax,30
or eax,eax
je end
mov ecx,eax
xor ebp,ebp
L2a:
movzx eax, byte ptr [esi+ebp]//mov al, byte ptr [esi+ebp]
movzx ebx, byte ptr [edi+ebp] //mov bl, byte ptr [edi+ebp]
cmp al,0x61
jl L2ac
cmp al,0x7a
jg L2ac 
sub al,0x20
//cap
L2ac:
cmp bl,0x61
jl L2ab
cmp bl,0x7a
jg L2ab
sub bl,0x20
L2ab:
cmp al,bl
jne endf
inc ebp
cmp ebp,ecx
jl L2a
end:
xor eax,eax
pop ebp
mov t,eax
jmp rt
endf:
xor eax,eax
inc eax
pop ebp
mov t,eax
    }
rt:
return t;

    }