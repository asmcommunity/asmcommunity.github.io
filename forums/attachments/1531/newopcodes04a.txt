<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<!--

The reference is now divided among main parts. For navigation, there are references to these parts also at the beginning.
Main new feature is complete support for printing, with how-to-print instructions and notes. In order to get nice printer layout, any opcode extension gets its own row (see opcodes 80, 82, C0, D8, [b]DB[/b], 0F00, and 0F01). It seems to be better readable now, at least for me. Any part (and also notes below the tables) starts at new page.

-->

<html>
<head>

 <meta http-equiv="content-type" content="text/html; charset=iso-8859-2">

 <title>x86 and x87 opcodes reference v0.4a by MazeGen</title>

 <style type="text/css">

  @media screen {
  body {background-color: #F0F0F0; font-family: "Courier New", "Courier", monospace; font-size: 75%;}
  tbody:hover {background-color: #D0D0D0;}
  }

  @media print {
  body {background-color: white; font-family: "Courier New", "Courier", monospace; font-size: 75%;}
  h1, h2, h3, h4, h5, h6 {page-break-after: avoid;}
  a {text-decoration: none; color: black}
  .breakbefore {page-break-before: always;}
  .noprint {display: none;}
  }

  table {border-collapse: collapse;}
  caption {font-size: medium; font-weight: bold; text-align: left; line-height: 250%;}
  thead {border-style: solid; border-width: 3px; border-color: black; font-family: "Courier New", "Courier", monospace;}
  tbody {border-style: solid; border-width: 2px; border-color: black; font-family: "Courier New", "Courier", monospace;}
  td    {border: 1px solid black;}
  .highlight {background-color: #D0D0D0;}

 </style>

</head>

<body>

<p class="noprint">
      <a href="#coldesc">Description</a>
&nbsp;<a href="#browsers">Browsers (with how-to-print informations)</a>
</p>

<p class="noprint">
      <a href="#gen_sys">General and System Opcodes</a>
&nbsp;<a href="#2byte">2-byte Opcodes</a>
&nbsp;<a href="#X87FPU">x87&nbsp;FPU Opcodes</a>
&nbsp;<a href="#iext">Instruction Extensions Opcodes</a>
</p>

<table cellpadding="2">
 <caption><a name="gen_sys">General and System Opcodes</a></caption>

 <col span="2">
 <col class="highlight">		<!-- highlight primary opcode -->

 <thead>
  <tr>
   <td title="Fixed Prefix 1">p1
   <td title="Fixed Prefix 2">p2
   <td title="Primary Opcode">po
   <td title="Secondary Opcode">so
   <td title="Opcode Fields">flds
   <td title="Mod Field">mod
   <td title="Register/Opcode Field">o
   <td title="Introduced with the Processor">proc
   <td title="Status">st&nbsp;
   <td title="Mode of Operation">m
   <td title="Ring Level">rl
   <td title="Lock Prefix">l
   <td title="Instruction Mnemonic">mnemonic&nbsp;&nbsp;&nbsp;
   <td title="Operand 1">op1&nbsp;
   <td title="Operand 2">op2&nbsp;
   <td title="Operand 1">op3&nbsp;
   <td title="Instruction Extension Group">iext
   <td title="Main Group">group1
   <td title="Sub-group">group&nbsp;2
   <td title="Sub-sub-group">group&nbsp;3
   <td title="Tested Flags">tested&nbsp;f
   <td title="Modified Flags">modif&nbsp;f&nbsp;
   <td title="Defined Flags">def&nbsp;f&nbsp;&nbsp;&nbsp;
   <td title="Undefined Flags">undef&nbsp;f&nbsp;
   <td title="Flags Values">f&nbsp;values
<td title="Description, Notes">description,&nbsp;notes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </tr>
 </thead>

 <tbody>			<!-- 00 -->
  <tr>
   <td>
   <td>
   <td>00
   <td>
   <td>dw
   <td>
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>ADD
   <td>Eb
   <td>Gb
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add
  </tr>
 </tbody>

 <tbody>			<!-- 01 -->
  <tr>
   <td>
   <td>
   <td>01
   <td>
   <td>dW
   <td>
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>ADD
   <td>Evqp
   <td>Gvqp
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add
  </tr>
 </tbody>

 <tbody>			<!-- 02 -->
  <tr>
   <td>
   <td>
   <td>02
   <td>
   <td>Dw
   <td>
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>ADD
   <td>Gb
   <td>Eb
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add
  </tr>
 </tbody>

 <tbody>			<!-- 03 -->
  <tr>
   <td>
   <td>
   <td>03
   <td>
   <td>DW
   <td>
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>ADD
   <td>Gvqp
   <td>Evqp
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add
  </tr>
 </tbody>

 <tbody>			<!-- 04 -->
  <tr>
   <td>
   <td>
   <td>04
   <td>
   <td>w
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>
   <td>ADD
   <td>AL
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add
  </tr>
 </tbody>

 <tbody>			<!-- 05 -->
  <tr>
   <td>
   <td>
   <td>05
   <td>
   <td>W
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>
   <td>ADD
   <td>rAX
   <td>Ivds
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add
  </tr>
 </tbody>

 <tbody>			<!-- 06 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">06
   <td rowspan="2">
   <td>sr
   <td rowspan="2">
   <td rowspan="2">
   <td>00+
   <td rowspan="2">D
   <td>R
   <td>3
   <td rowspan="2">
   <td>PUSH
   <td>ES
   <td>
   <td>
   <td>
   <td>gen
   <td colspan="2">stack segreg
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Push Word, Doubleword or Quadword Onto the Stack
  </tr>
  <tr>
   <td>
   <td>64E+
   <td>
   <td>
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Invalid Instruction in 64-Bit Mode
  </tr>
 </tbody>

 <tbody>			<!-- 07 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">07
   <td rowspan="2">
   <td>sr
   <td rowspan="2">
   <td rowspan="2">
   <td>00+
   <td rowspan="2">D
   <td>R
   <td>3
   <td rowspan="2">
   <td>POP
   <td>ES
   <td>
   <td>
   <td>
   <td>gen
   <td colspan="2">stack segreg
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Pop a Value from the Stack
  </tr>
  <tr>
   <td>
   <td>64E+
   <td>
   <td>
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Invalid Instruction in 64-Bit Mode
  </tr>
 </tbody>

 <tbody>			<!-- 08 -->
  <tr>
   <td>
   <td>
   <td>08
   <td>
   <td>dw
   <td>
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>OR
   <td>Eb
   <td>Gb
   <td>
   <td>
   <td>gen
   <td>logical
   <td>
   <td>
   <td>o..szapc
   <td>o..sz.pc
   <td>.....a..
   <td>o......c
   <td>Logical Inclusive OR
  </tr>
 </tbody>

 <tbody>			<!-- 09 -->
  <tr>
   <td>
   <td>
   <td>09
   <td>
   <td>dW
   <td>
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>OR
   <td>Evqp
   <td>Gvqp
   <td>
   <td>
   <td>gen
   <td>logical
   <td>
   <td>
   <td>o..szapc
   <td>o..sz.pc
   <td>.....a..
   <td>o......c
   <td>Logical Inclusive OR
  </tr>
 </tbody>

 <tbody>			<!-- 0A -->
  <tr>
   <td>
   <td>
   <td>0A
   <td>
   <td>Dw
   <td>
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>OR
   <td>Gb
   <td>Eb
   <td>
   <td>
   <td>gen
   <td>logical
   <td>
   <td>
   <td>o..szapc
   <td>o..sz.pc
   <td>.....a..
   <td>o......c
   <td>Logical Inclusive OR
  </tr>
 </tbody>

 <tbody>			<!-- 0B -->
  <tr>
   <td>
   <td>
   <td>0B
   <td>
   <td>DW
   <td>
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>OR
   <td>Gvqp
   <td>Evqp
   <td>
   <td>
   <td>gen
   <td>logical
   <td>
   <td>
   <td>o..szapc
   <td>o..sz.pc
   <td>.....a..
   <td>o......c
   <td>Logical Inclusive OR
  </tr>
 </tbody>

 <tbody>			<!-- 0C -->
  <tr>
   <td>
   <td>
   <td>0C
   <td>
   <td>w
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>
   <td>OR
   <td>AL
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>logical
   <td>
   <td>
   <td>o..szapc
   <td>o..sz.pc
   <td>.....a..
   <td>o......c
   <td>Logical Inclusive OR
  </tr>
 </tbody>

 <tbody>			<!-- 0D -->
  <tr>
   <td>
   <td>
   <td>0D
   <td>
   <td>W
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>
   <td>OR
   <td>rAX
   <td>Ivds
   <td>
   <td>
   <td>gen
   <td>logical
   <td>
   <td>
   <td>o..szapc
   <td>o..sz.pc
   <td>.....a..
   <td>o......c
   <td>Logical Inclusive OR
  </tr>
 </tbody>

 <tbody>			<!-- 0E -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">0E
   <td rowspan="2">
   <td>sR
   <td rowspan="2">
   <td rowspan="2">
   <td>00+
   <td rowspan="2">D
   <td>R
   <td>3
   <td rowspan="2">
   <td>PUSH
   <td>CS
   <td>
   <td>
   <td>
   <td>gen
   <td colspan="2">stack segreg
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Push Word, Doubleword or Quadword Onto the Stack
  </tr>
  <tr>
   <td>
   <td>64E+
   <td>
   <td>
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Invalid Instruction in 64-Bit Mode
  </tr>
 </tbody>

 <tbody>			<!-- 0F -->
  <tr>
   <td rowspan="3">
   <td rowspan="2">
   <td rowspan="2">0F
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td>00
   <td>D<a href="#gen_note1" title="OPCODE.LST, Revision 4.51, 15 Oct 1999 &copy; Potemkin's Hackers Group 1994...1999"><sup>1</sup></a>
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td>POP
   <td>CS
   <td>
   <td>
   <td>
   <td>gen
   <td colspan="2">stack segreg
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Pop a Value from the Stack
  </tr>
  <tr>
   <td>01
   <td rowspan="2">D
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
  </tr>
  <tr>
   <td class="highlight">0F
   <td>
   <td>02+
   <td colspan="14"><a href="#2byte">2-byte Opcodes</a>
  </tr>
 </tbody>

 <tbody>			<!-- 10 -->
  <tr>
   <td>
   <td>
   <td>10
   <td>
   <td>dw
   <td>
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>ADC
   <td>Eb
   <td>Gb
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>.......c
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add with Carry
  </tr>
 </tbody>

 <tbody>			<!-- 11 -->
  <tr>
   <td>
   <td>
   <td>11
   <td>
   <td>dW
   <td>
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>ADC
   <td>Evqp
   <td>Gvqp
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>.......c
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add with Carry
  </tr>
 </tbody>

 <tbody>			<!-- 12 -->
  <tr>
   <td>
   <td>
   <td>12
   <td>
   <td>Dw
   <td>
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>ADC
   <td>Gb
   <td>Eb
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>.......c
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add with Carry
  </tr>
 </tbody>

 <tbody>			<!-- 13 -->
  <tr>
   <td>
   <td>
   <td>13
   <td>
   <td>DW
   <td>
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>ADC
   <td>Gvqp
   <td>Evqp
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>.......c
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add with Carry
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- 26 -->
  <tr>
   <td rowspan="3">
   <td rowspan="3" class="highlight">26
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td>00+
   <td rowspan="3">D
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td colspan="4">ES
   <td rowspan="3">
   <td rowspan="3">pref
   <td>segreg
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td>ES segment override prefix
  </tr>
  <tr>
   <td>P4+
   <td colspan="4"><i>reserved</i>
   <td>branch
   <td>(use with any branch instruction is reserved)
  </tr>
  <tr>
   <td>64E+
   <td colspan="4"><i>null</i>
   <td>segreg
   <td>Null Prefix in 64-bit Mode.
  </tr>
 </tbody>

 <tbody>			<!-- 27 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">27
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td>00+
   <td rowspan="2">D
   <td>R
   <td>3
   <td rowspan="2">
   <td>DAA
   <td>
   <td>
   <td>
   <td rowspan="2">
   <td>gen
   <td>arith
   <td>decimal
   <td>.....a.c
   <td>o..szapc
   <td>...szapc
   <td>o.......
   <td rowspan="2">
   <td>Decimal Adjust AL after Addition
  </tr>
  <tr>
   <td>64E+
   <td>
   <td>
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Invalid Instruction in 64-Bit Mode
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- 2E -->
  <tr>
   <td rowspan="3">
   <td rowspan="3" class="highlight">2E
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td>00+
   <td rowspan="3">D
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td colspan="4">CS
   <td rowspan="3">
   <td rowspan="3">pref
   <td>segreg
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td>ES segment override prefix
  </tr>
  <tr>
   <td>P4+
   <td colspan="4"><i>no mnemonic</i> <i>(NTAKEN)</i>
   <td>branch
   <td>Branch not taken prefix (used only with Jcc instructions)
  </tr>
  <tr>
   <td>64E+
   <td colspan="4"><i>null</i>
   <td>segreg
   <td>Null Prefix in 64-bit Mode.
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- 40 -->
  <tr>
   <td rowspan="2">
   <td>
   <td>40
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td>00+
   <td rowspan="2">D
   <td>R
   <td>3
   <td>
   <td>INC
   <td>eAX
   <td>
   <td>
   <td rowspan="2">
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szap.
   <td>o..szap.
   <td>
   <td>
   <td>Increment by 1
  </tr>
  <tr>
   <td class="highlight">40
   <td>
   <td>64E+
   <td>
   <td>
   <td>
   <td colspan="4"><i>no mnemonic</i>
   <td>pref
   <td>rex
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
  </tr>
 </tbody>

 <tbody>			<!-- 41 -->
  <tr>
   <td rowspan="2">
   <td>
   <td>41
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td>00+
   <td rowspan="2">D
   <td>R
   <td>3
   <td>
   <td>INC
   <td>eCX
   <td>
   <td>
   <td rowspan="2">
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szap.
   <td>o..szap.
   <td>
   <td>
   <td>Increment by 1
  </tr>
  <tr>
   <td class="highlight">41
   <td>
   <td>64E+
   <td>
   <td>
   <td>
   <td colspan="4">REX.B
   <td>pref
   <td>rex
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>1-bit extension of the r/m field, base field, or opcode reg field
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- 50-57 -->
  <tr>
   <td>
   <td>
   <td>50
   <td>
   <td>+r
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>
   <td>PUSH
   <td>Zvq
   <td>
   <td>
   <td>
   <td>gen
   <td>stack
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Push Word, Doubleword or Quadword Onto the Stack
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- 62 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">62
   <td rowspan="2">
   <td>D
   <td rowspan="2">
   <td>r
   <td>00+
   <td>D
   <td>R
   <td>f
   <td>
   <td>BOUND
   <td>Gv
   <td>Ma
   <td>
   <td>
   <td>gen
   <td>branch
   <td>int
   <td>ODISZAPC
   <td>..I.....
   <td>..I.....
   <td>
   <td>..I.....
   <td>Check Array Index Against Bounds
  </tr>
  <tr>
   <td>
   <td>
   <td>64E+
   <td>
   <td>
   <td>
   <td>
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Invalid Instruction in 64-Bit Mode
  </tr>
 </tbody>

 <tbody>			<!-- 63 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">63
   <td rowspan="2">
   <td>
   <td rowspan="2">
   <td rowspan="2">r
   <td>00+
   <td rowspan="2">D
   <td>P
   <td rowspan="2">3
   <td rowspan="2">
   <td>ARPL
   <td>Ew
   <td>Gw
   <td>
   <td>
   <td>system
   <td>
   <td>
   <td>
   <td>....z...
   <td>....z...
   <td>
   <td>
   <td>Adjust RPL Field of Segment Selector
  </tr>
  <tr>
   <td>D
   <td>64E+
   <td>R
   <td>MOVSXD
   <td>Gqp
   <td>Eds
   <td>
   <td>
   <td>gen
   <td>conver
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Move with Sign-Extension
  </tr>
 </tbody>

 <tbody>			<!-- 64 -->
  <tr>
   <td rowspan="3">
   <td rowspan="3" class="highlight">64
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td>03+
   <td rowspan="2">D
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td colspan="4">FS
   <td rowspan="3">
   <td rowspan="3">pref
   <td>segreg
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td>ES segment override prefix
  </tr>
  <tr>
   <td rowspan="2">P4+
   <td colspan="4"><i>reserved</i>
   <td rowspan="2">branch
   <td>(use with any branch instruction is reserved)
  </tr>
  <tr>
   <td>U<a href="#gen_note2" title="How to optimize for the Pentium family of microprocessors, By Agner Fog, Ph.D., Copyright &copy; 1996 - 2003"><sup>2</sup></a>
   <td colspan="4"><i>no mnemonic</i> <i>(ALTER)</i>
   <td>Alternating branch prefix (used only with Jcc instructions)
  </tr>
 </tbody>

 <tbody>			<!-- 65 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2" class="highlight">65
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td>03+
   <td rowspan="2">D
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td colspan="4">GS
   <td rowspan="2">
   <td rowspan="2">pref
   <td>segreg
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td>GS segment override prefix
  </tr>
  <tr>
   <td>P4+
   <td colspan="4"><i>reserved</i>
   <td>branch
   <td>(use with any branch instruction is reserved)
  </tr>
 </tbody>

 <tbody>			<!-- 66 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2" class="highlight">66
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td>00+
   <td>D
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2" colspan="4"><i>no mnemonic</i>
   <td>
   <td rowspan="2">pref
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td>Operand-size override prefix
  </tr>
  <tr>
   <td>P4+
   <td>M
   <td>sse2
   <td>Precision-size override prefix
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- 6E -->
  <tr>
   <td>
   <td>
   <td>6E
   <td>
   <td>w
   <td>
   <td>
   <td>01+
   <td>D
   <td>R
   <td>f<a href="#r_note1" title="rFlags.IOPL"><sup>1</sup></a>
   <td>
   <td>OUTS <i>OUTSB</i>
   <td>DX
   <td>Xb
   <td>
   <td>
   <td>gen
   <td colspan="2">inout string
   <td>.d......
   <td>
   <td>
   <td>
   <td>
   <td>Output String to Port
  </tr>
 </tbody>

 <tbody>			<!-- 6F -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">6F
   <td rowspan="2">
   <td rowspan="2">W
   <td rowspan="2">
   <td rowspan="2">
   <td>01+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">f<a href="#r_note1" title="rFlags.IOPL"><sup>1</sup></a>
   <td rowspan="2">
   <td>OUTS <i>OUTSW</i>
   <td rowspan="2">DX
   <td rowspan="2">Xv
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">gen
   <td rowspan="2" colspan="2">inout string
   <td rowspan="2">.d......
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">Output String to Port
  </tr>

  <tr>
   <td>03+
   <td>OUTS <i>OUTSD</i>
  </tr>
 </tbody>

 <tbody>			<!-- 70 -->
  <tr>
   <td>
   <td>
   <td>70
   <td>
   <td>tttn
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>
   <td>JO
   <td>Jb
   <td>
   <td>
   <td>
   <td>gen
   <td>branch
   <td>
   <td>o.......
   <td>
   <td>
   <td>
   <td>
   <td>Jump short if overflow (OF=1)
  </tr>
 </tbody>

 <tbody>			<!-- 71 -->
  <tr>
   <td>
   <td>
   <td>71
   <td>
   <td>tttN
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>
   <td>JNO
   <td>Jb
   <td>
   <td>
   <td>
   <td>gen
   <td>branch
   <td>
   <td>o.......
   <td>
   <td>
   <td>
   <td>
   <td>Jump short if not overflow (OF=0)
  </tr>
 </tbody>

 <tbody>			<!-- 72 -->
  <tr>
   <td>
   <td>
   <td>72
   <td>
   <td>ttTn
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>
   <td>JB/NAE/C
   <td>Jb
   <td>
   <td>
   <td>
   <td>gen
   <td>branch
   <td>
   <td>.......c
   <td>
   <td>
   <td>
   <td>
   <td>Jump short if below/not above or equal/carry (CF=1)
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- 80 /0 -->
  <tr>
   <td>
   <td>
   <td>80
   <td>
   <td>w
   <td>
   <td class="highlight"><a name="80_0">0</a>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>ADD
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add
  </tr>
 </tbody>

 <tbody>			<!-- 80 /1 -->
  <tr>
   <td>
   <td>
   <td>80
   <td>
   <td>w
   <td>
   <td class="highlight"><a name="80_1">1</a>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>OR
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>logical
   <td>
   <td>
   <td>o..szapc
   <td>o..sz.pc
   <td>.....a..
   <td>o......c
   <td>Logical Inclusive OR
  </tr>
 </tbody>

 <tbody>			<!-- 80 /2 -->
  <tr>
   <td>
   <td>
   <td>80
   <td>
   <td>w
   <td>
   <td class="highlight"><a name="80_2">2</a>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>ADC
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>.......c
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add with Carry
  </tr>
 </tbody>

 <tbody>			<!-- 80 /3 -->
  <tr>
   <td>
   <td>
   <td>80
   <td>
   <td>w
   <td>
   <td class="highlight"><a name="80_3">3</a>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>SBB
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>.......c
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Integer Subtraction with Borrow
  </tr>
 </tbody>

 <tbody>			<!-- 80 /4 -->
  <tr>
   <td>
   <td>
   <td>80
   <td>
   <td>w
   <td>
   <td class="highlight"><a name="80_4">4</a>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>AND
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>logical
   <td>
   <td>
   <td>o..szapc
   <td>o..sz.pc
   <td>.....a..
   <td>o......c
   <td>Logical AND
  </tr>
 </tbody>

 <tbody>			<!-- 80 /5 -->
  <tr>
   <td>
   <td>
   <td>80
   <td>
   <td>w
   <td>
   <td class="highlight"><a name="80_5">5</a>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>SUB
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Subtract
  </tr>
 </tbody>

 <tbody>			<!-- 80 /6 -->
  <tr>
   <td>
   <td>
   <td>80
   <td>
   <td>w
   <td>
   <td class="highlight"><a name="80_6">6</a>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>XOR
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>logical
   <td>
   <td>
   <td>o..szapc
   <td>o..sz.pc
   <td>.....a..
   <td>o......c
   <td>Logical Exclusive OR
  </tr>
 </tbody>

 <tbody>			<!-- 80 /7 -->
  <tr>
   <td>
   <td>
   <td>80
   <td>
   <td>w
   <td>
   <td class="highlight"><a name="80_7">7</a>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>CMP
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Compare Two Operands
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- 82 /0 -->
  <tr>
   <td>
   <td>
   <td>82
   <td>
   <td>w
   <td>
   <td class="highlight">0
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>ADD <a href="#80_0" title="80 /0"><i>alias</i></a>
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add
  </tr>
 </tbody>

 <tbody>			<!-- 82 /1 -->
  <tr>
   <td>
   <td>
   <td>82
   <td>
   <td>w
   <td>
   <td class="highlight">1
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>OR <a href="#80_1" title="80 /1"><i>alias</i></a>
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>logical
   <td>
   <td>
   <td>o..szapc
   <td>o..sz.pc
   <td>.....a..
   <td>o......c
   <td>Logical Inclusive OR
  </tr>
 </tbody>

 <tbody>			<!-- 82 /2 -->
  <tr>
   <td>
   <td>
   <td>82
   <td>
   <td>w
   <td>
   <td class="highlight">2
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>ADC <a href="#80_2" title="80 /2"><i>alias</i></a>
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>.......c
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Add with Carry
  </tr>
 </tbody>

 <tbody>			<!-- 82 /3 -->
  <tr>
   <td>
   <td>
   <td>82
   <td>
   <td>w
   <td>
   <td class="highlight">3
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>SBB <a href="#80_3" title="80 /3"><i>alias</i></a>
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>.......c
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Integer Subtraction with Borrow
  </tr>
 </tbody>

 <tbody>			<!-- 82 /4 -->
  <tr>
   <td>
   <td>
   <td>82
   <td>
   <td>w
   <td>
   <td class="highlight">4
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>AND <a href="#80_4" title="80 /4"><i>alias</i></a>
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>logical
   <td>
   <td>
   <td>o..szapc
   <td>o..sz.pc
   <td>.....a..
   <td>o......c
   <td>Logical AND
  </tr>
 </tbody>

 <tbody>			<!-- 82 /5 -->
  <tr>
   <td>
   <td>
   <td>82
   <td>
   <td>w
   <td>
   <td class="highlight">5
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>SUB <a href="#80_5" title="80 /5"><i>alias</i></a>
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Subtract
  </tr>
 </tbody>

 <tbody>			<!-- 82 /6 -->
  <tr>
   <td>
   <td>
   <td>82
   <td>
   <td>w
   <td>
   <td class="highlight">6
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>XOR <a href="#80_6" title="80 /6"><i>alias</i></a>
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>logical
   <td>
   <td>
   <td>o..szapc
   <td>o..sz.pc
   <td>.....a..
   <td>o......c
   <td>Logical Exclusive OR
  </tr>
 </tbody>

 <tbody>			<!-- 82 /7 -->
  <tr>
   <td>
   <td>
   <td>82
   <td>
   <td>w
   <td>
   <td class="highlight">7
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>L
   <td>CMP <a href="#80_7" title="80 /7"><i>alias</i></a>
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>arith
   <td>binary
   <td>
   <td>o..szapc
   <td>o..szapc
   <td>
   <td>
   <td>Compare Two Operands
  </tr>
 </tbody>

 <tbody>			<!-- 82 -->
  <tr>
   <td>
   <td>
   <td>82
   <td>
   <td>
   <td>
   <td>
   <td>64E+
   <td>
   <td>
   <td>
   <td>
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Invalid Instruction in 64-Bit Mode
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- 90 -->
  <tr>
   <td rowspan="4">
   <td rowspan="2">
   <td rowspan="4">90
   <td rowspan="4">
   <td>+r
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="3">00+
   <td rowspan="4">D
   <td rowspan="4">R
   <td rowspan="4">3
   <td rowspan="4">
   <td>XCHG
   <td>Zvqp
   <td>rAX
   <td>
   <td rowspan="4">
   <td rowspan="4">gen
   <td>datamov
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Exchange Register/Memory with Register
  </tr>
  <tr>
   <td rowspan="3">
   <td rowspan="2">NOP
   <td>&nbsp;
   <td>&nbsp;
   <td>&nbsp;
   <td rowspan="3">control
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">No Operation
  </tr>
  <tr>
   <td rowspan="2">F3
   <td>&nbsp;
   <td>&nbsp;
   <td>&nbsp;
  </tr>
  <tr>
   <td>P4+
   <td>PAUSE
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Spin Loop Hint
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- 9B -->
  <tr>
   <td>
   <td>
   <td>9B
   <td>
   <td>
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>
   <td>WAIT <i>FWAIT</i>
   <td>
   <td>
   <td>
   <td>
   <td>x87fpu
   <td>control
   <td>
   <td>
   <td>0123
   <td>
   <td>0123
   <td>
   <td>Wait
  </tr>
 </tbody>

 <tbody>			<!-- 9C -->
  <tr>
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">9C
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td>00+
   <td rowspan="3">D
   <td rowspan="3">R
   <td rowspan="3">3
   <td rowspan="3">
   <td>PUSHF
   <td><i>Fw</i>
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">gen
   <td rowspan="3" colspan="2">stack flgctrl
   <td rowspan="3">odiszapc
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">Push rFLAGS Register onto the Stack
  </tr>
  <tr>
   <td>03+
   <td>PUSHF/ PUSHFD
   <td><i>Fv</i>
  </tr>
  <tr>
   <td>64E+
   <td>PUSHF/ PUSHFQ
   <td><i>Fvq</i>
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- C0 /0 -->
  <tr>
   <td>
   <td>
   <td>C0
   <td>
   <td>w
   <td>
   <td class="highlight">0
   <td>01+
   <td>D
   <td>R
   <td>3
   <td>
   <td>ROL
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>shftrot
   <td>
   <td>
   <td>o..szapc
   <td>O..szapc
   <td>O.......
   <td>
   <td>Rotate
  </tr>
 </tbody>

 <tbody>			<!-- C0 /1 -->
  <tr>
   <td>
   <td>
   <td>C0
   <td>
   <td>w
   <td>
   <td class="highlight">1
   <td>01+
   <td>D
   <td>R
   <td>3
   <td>
   <td>ROR
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>shftrot
   <td>
   <td>
   <td>o..szapc
   <td>O..szapc
   <td>O.......
   <td>
   <td>Rotate
  </tr>
 </tbody>

 <tbody>			<!-- C0 /2 -->
  <tr>
   <td>
   <td>
   <td>C0
   <td>
   <td>w
   <td>
   <td class="highlight">2
   <td>01+
   <td>D
   <td>R
   <td>3
   <td>
   <td>RCL
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>shftrot
   <td>
   <td>.......c
   <td>o..szapc
   <td>O..szapc
   <td>O.......
   <td>
   <td>Rotate
  </tr>
 </tbody>

 <tbody>			<!-- C0 /3 -->
  <tr>
   <td>
   <td>
   <td>C0
   <td>
   <td>w
   <td>
   <td class="highlight">3
   <td>01+
   <td>D
   <td>R
   <td>3
   <td>
   <td>RCR
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>shftrot
   <td>
   <td>.......c
   <td>o..szapc
   <td>O..szapc
   <td>O.......
   <td>
   <td>Rotate
  </tr>
 </tbody>

 <tbody>			<!-- C0 /4 -->
  <tr>
   <td>
   <td>
   <td>C0
   <td>
   <td>w
   <td>
   <td class="highlight"><a name="C0_4">4</a>
   <td>01+
   <td>D
   <td>R
   <td>3
   <td>
   <td>SHL <i>SAL</i>
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>shftrot
   <td>
   <td>
   <td>O..szapc
   <td>O..sz.pc
   <td>.....a..
   <td>
   <td>Shift
  </tr>
 </tbody>

 <tbody>			<!-- C0 /5 -->
  <tr>
   <td>
   <td>
   <td>C0
   <td>
   <td>w
   <td>
   <td class="highlight">5
   <td>01+
   <td>D
   <td>R
   <td>3
   <td>
   <td>SHR
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>shftrot
   <td>
   <td>
   <td>O..szapc
   <td>O..sz.pc
   <td>.....a..
   <td>
   <td>Shift
  </tr>
 </tbody>

 <tbody>			<!-- C0 /6 -->
  <tr>
   <td>
   <td>
   <td>C0
   <td>
   <td>w
   <td>
   <td class="highlight">6
   <td>01+
   <td>U<a href="#gen_note3" title="sandpile.org -- IA-32 architecture -- opcode groups"><sup>3</sup></a>
   <td>R
   <td>3
   <td>
   <td>SAL <i>SHL</i> <a href="#C0_4" title="C0 /4"><i>alias</i></a>
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>shftrot
   <td>
   <td>
   <td>O..szapc
   <td>O..sz.pc
   <td>.....a..
   <td>
   <td>Shift
  </tr>
 </tbody>

 <tbody>			<!-- C0 /7 -->
  <tr>
   <td>
   <td>
   <td>C0
   <td>
   <td>w
   <td>
   <td class="highlight">7
   <td>01+
   <td>D
   <td>R
   <td>3
   <td>
   <td>SAR
   <td>Eb
   <td>Ib
   <td>
   <td>
   <td>gen
   <td>shftrot
   <td>
   <td>
   <td>O..szapc
   <td>O..sz.pc
   <td>.....a..
   <td>
   <td>Shift
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- C3 -->
  <tr>
   <td>
   <td>
   <td>C3
   <td>
   <td>
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>
   <td>RET
   <td>
   <td>
   <td>
   <td>
   <td>gen
   <td>branch
   <td>near
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Return from Procedure
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- CB -->
  <tr>
   <td>
   <td>
   <td>CB
   <td>
   <td>
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>f
   <td>
   <td>RET
   <td>
   <td>
   <td>
   <td>
   <td>gen
   <td>branch
   <td>far
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Return from Procedure
  </tr>
 </tbody>

 <tbody>			<!-- CC -->
  <tr>
   <td>
   <td>
   <td>CC
   <td>
   <td>
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>f
   <td>
   <td>INT
   <td>3
   <td>
   <td>
   <td>
   <td>gen
   <td>branch
   <td>int
   <td>odiszapc
   <td>..i.....
   <td>..i.....
   <td>
   <td>..i.....
   <td>Call to Interrupt Procedure
  </tr>
 </tbody>

 <tbody>			<!-- CD -->
  <tr>
   <td>
   <td>
   <td><a name="CD">CD</a>
   <td>
   <td>
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>f
   <td>
   <td>INT
   <td>Ib
   <td>
   <td>
   <td>
   <td>gen
   <td>branch
   <td>int
   <td>odiszapc
   <td>..i.....
   <td>..i.....
   <td>
   <td>..i.....
   <td>Call to Interrupt Procedure
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- D4 -->
  <tr>
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">D4
   <td>0A
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="2">00+
   <td rowspan="3">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td>AAM
   <td>
   <td>
   <td>
   <td rowspan="2">
   <td rowspan="2">gen
   <td rowspan="2">arith
   <td rowspan="2">decimal
   <td rowspan="2">
   <td rowspan="2">o..szapc
   <td rowspan="2">...sz.p.
   <td rowspan="2">o....a.c
   <td rowspan="2">
   <td>ASCII Adjust AX After Multiply
  </tr>
  <tr>
   <td rowspan="2">
   <td><i>no mnemonic</i> <i>(AM)</i>
   <td>Ib
   <td>
   <td>
   <td>Adjust AX after multiply
  </tr>
  <tr>
   <td>64E+
   <td>
   <td>
   <td>
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Invalid Instruction in 64-Bit Mode
  </tr>
 </tbody>

 <tbody>			<!-- D5 -->
  <tr>
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">D5
   <td>0A
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="2">00+
   <td rowspan="3">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td>AAD
   <td>
   <td>
   <td>
   <td rowspan="2">
   <td rowspan="2">gen
   <td rowspan="2">arith
   <td rowspan="2">decimal
   <td rowspan="2">
   <td rowspan="2">o..szapc
   <td rowspan="2">...sz.p.
   <td rowspan="2">o....a.c
   <td rowspan="2">
   <td>ASCII Adjust AX Before Division
  </tr>
  <tr>
   <td rowspan="2">
   <td><i>no mnemonic</i> <i>(AD)</i>
   <td>Ib
   <td>
   <td>
   <td>Adjust AX Before Division
  </tr>
  <tr>
   <td>64E+
   <td>
   <td>
   <td>
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Invalid Instruction in 64-Bit Mode
  </tr>
 </tbody>

 <tbody>			<!-- D6 -->
  <tr>
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">D6
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td rowspan="3">
   <td>02+
   <td>D<a href="#gen_note4" title="IA-32 Intel&reg; Architecture Software Developer's Manual Volume 3: System Programming Guide, Interrupt and Exception Handling"><sup>4</sup></a>
   <td>
   <td>
   <td>
   <td colspan="4"><i>undefined</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Undefined and Reserved; Does not Generate #UD
  </tr>
  <tr>
   <td>02+
   <td>U<a href="#gen_note5" title="AMD64 Architecture Programmer's Manual Volume 3, Table One-Byte Opcodes"><sup>5</sup></a>
   <td>R
   <td>3
   <td>
   <td>SALC <i>SETALC</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>.......c
   <td>
   <td>
   <td>
   <td>
   <td>Set AL If Carry
  </tr>
  <tr>
   <td>64E+
   <td>D
   <td>
   <td>
   <td>
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Invalid Instruction in 64-Bit Mode
  </tr>
 </tbody>

 <tbody>			<!-- D7 -->
  <tr>
   <td>
   <td>
   <td>D7
   <td>
   <td>
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>
   <td>XLAT <i>XLATB</i>
   <td>
   <td>
   <td>
   <td>
   <td>gen
   <td>datamov
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Table Look-up Translation
  </tr>
 </tbody>

 <tbody>			<!-- D8-DF -->
  <tr>
   <td>
   <td>
   <td colspan="2">D8- DF <!-- Firefox needs this space in order to break it -->
   <td>
   <td>
   <td>
   <td>00+
   <td>D
   <td>R
   <td>3
   <td>
   <td colspan="14"><a href="#X87FPU">x87&nbsp;FPU Opcodes</a>
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</tr></tbody>

 <tbody>			<!-- F1 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">F1
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">03+
   <td>D<a href="#gen_note4" title="IA-32 Intel&reg; Architecture Software Developer's Manual Volume 3: System Programming Guide, Interrupt and Exception Handling"><sup>4</sup></a>
   <td>
   <td>
   <td>
   <td colspan="4"><i>undefined</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Undefined and Reserved; Does not Generate #UD
  </tr>
  <tr>
   <td>U<a href="#gen_note5" title="AMD64 Architecture Programmer's Manual Volume 3, Table One-Byte Opcodes"><sup>5</sup></a>
   <td>R
   <td>?
   <td>
   <td>INT1 <i>ICEBP</i> <i>partial</i><a href="#gen_note6" title="Christian Ludloff"><sup>6</sup></a> <a href="#CD" title="CD"><i>alias</i></a>
   <td>
   <td>
   <td>
   <td>
   <td>gen
   <td>branch
   <td>int
   <td>odiszapc
   <td>..i.....
   <td>..i.....
   <td>
   <td>..i.....
   <td>Call to Interrupt Procedure
  </tr>
 </tbody>
</table>

<table cellpadding="2">
 <caption class="breakbefore"><a name="X87FPU">x87&nbsp;FPU Opcodes</a></caption>

 <col span="2">
 <col class="highlight">		<!-- highlight primary opcode -->

 <thead>
  <tr>
   <td title="Fixed Prefix 1">p1
   <td title="Fixed Prefix 2">p2
   <td title="Primary Opcode">po
   <td title="Secondary Opcode">so
   <td title="Opcode Fields">flds
   <td title="Mod Field">mod
   <td title="Register/Opcode Field">o
   <td title="Introduced with the Processor">proc
   <td title="Status">st&nbsp;
   <td title="Mode of Operation">m
   <td title="Ring Level">rl
   <td title="Lock Prefix">l
   <td title="Instruction Mnemonic">mnemonic&nbsp;&nbsp;&nbsp;
   <td title="Operand 1">op1&nbsp;
   <td title="Operand 2">op2&nbsp;
   <td title="Operand 1">op3&nbsp;
   <td title="Instruction Extension Group">iext
   <td title="Main Group">group1
   <td title="Sub-group">group&nbsp;2
   <td title="Sub-sub-group">group&nbsp;3
   <td title="Tested Flags">tested&nbsp;f
   <td title="Modified Flags">modif&nbsp;f&nbsp;
   <td title="Defined Flags">def&nbsp;f&nbsp;&nbsp;&nbsp;
   <td title="Undefined Flags">undef&nbsp;f&nbsp;
   <td title="Flags Values">f&nbsp;values
<td title="Description, Notes">description,&nbsp;notes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </tr>
 </thead>

 <tbody>			<!-- D8 /0 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">D8
   <td rowspan="2">
   <td>mf
   <td>&ne;11
   <td rowspan="2" class="highlight">0
   <td rowspan="2">00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td rowspan="2">FADD
   <td>Msr
   <td>
   <td>
   <td rowspan="2">
   <td rowspan="2">x87fpu
   <td rowspan="2">arith
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">0123
   <td rowspan="2">.1..
   <td rowspan="2">0.23
   <td rowspan="2">
   <td rowspan="2">Add
  </tr>
  <tr>
   <td>
   <td>=11
   <td>ST
   <td>STi
   <td>
  </tr>
 </tbody>

 <tbody>			<!-- D8 /1 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">D8
   <td rowspan="2">
   <td>mf
   <td>&ne;11
   <td rowspan="2" class="highlight">1
   <td rowspan="2">00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td rowspan="2">FMUL
   <td>Msr
   <td>
   <td>
   <td rowspan="2">
   <td rowspan="2">x87fpu
   <td rowspan="2">arith
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">0123
   <td rowspan="2">.1..
   <td rowspan="2">0.23
   <td rowspan="2">
   <td rowspan="2">Multiply
  </tr>
  <tr>
   <td>
   <td>=11
   <td>ST
   <td>STi
   <td>
  </tr>
 </tbody>

 <tbody>			<!-- D8 /2 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">D8
   <td rowspan="2">
   <td>mf
   <td>&ne;11
   <td rowspan="2" class="highlight">2
   <td rowspan="2">00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td rowspan="2">FCOM
   <td>Msr
   <td>
   <td>
   <td rowspan="2">
   <td rowspan="2">x87fpu
   <td rowspan="2">arith
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">0123
   <td rowspan="2">.1..
   <td rowspan="2">0.23
   <td rowspan="2">
   <td rowspan="2">Compare Floating Point Values
  </tr>
  <tr>
   <td>
   <td>=11
   <td><i>ST</i>
   <td>STi
   <td>
  </tr>
 </tbody>

 <tbody>			<!-- D8 /3 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">D8
   <td rowspan="2">
   <td>mf
   <td>&ne;11
   <td rowspan="2" class="highlight">3
   <td rowspan="2">00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td rowspan="2">FCOMP
   <td>Msr
   <td>
   <td>
   <td rowspan="2">
   <td rowspan="2">x87fpu
   <td rowspan="2">arith
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">0123
   <td rowspan="2">.1..
   <td rowspan="2">0.23
   <td rowspan="2">
   <td rowspan="2">Compare Floating Point Values
  </tr>
  <tr>
   <td>
   <td>=11
   <td><i>ST</i>
   <td>STi
   <td>
  </tr>
 </tbody>

 <tbody>			<!-- D8 /4 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">D8
   <td rowspan="2">
   <td>mf
   <td>&ne;11
   <td rowspan="2" class="highlight">4
   <td rowspan="2">00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td rowspan="2">FSUB
   <td>Msr
   <td>
   <td>
   <td rowspan="2">
   <td rowspan="2">x87fpu
   <td rowspan="2">arith
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">0123
   <td rowspan="2">.1..
   <td rowspan="2">0.23
   <td rowspan="2">
   <td rowspan="2">Subtract
  </tr>
  <tr>
   <td>
   <td>=11
   <td>ST
   <td>STi
   <td>
  </tr>
 </tbody>

 <tbody>			<!-- D8 /5 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">D8
   <td rowspan="2">
   <td>mf
   <td>&ne;11
   <td rowspan="2" class="highlight">5
   <td rowspan="2">00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td rowspan="2">FSUBR
   <td>Msr
   <td>
   <td>
   <td rowspan="2">
   <td rowspan="2">x87fpu
   <td rowspan="2">arith
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">0123
   <td rowspan="2">.1..
   <td rowspan="2">0.23
   <td rowspan="2">
   <td rowspan="2">Reverse Subtract
  </tr>
  <tr>
   <td>
   <td>=11
   <td>ST
   <td>STi
   <td>
  </tr>
 </tbody>

 <tbody>			<!-- D8 /6 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">D8
   <td rowspan="2">
   <td>mf
   <td>&ne;11
   <td rowspan="2" class="highlight">6
   <td rowspan="2">00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td rowspan="2">FDIV
   <td>Msr
   <td>
   <td>
   <td rowspan="2">
   <td rowspan="2">x87fpu
   <td rowspan="2">arith
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">0123
   <td rowspan="2">.1..
   <td rowspan="2">0.23
   <td rowspan="2">
   <td rowspan="2">Divide
  </tr>
  <tr>
   <td>
   <td>=11
   <td>ST
   <td>STi
   <td>
  </tr>
 </tbody>

 <tbody>			<!-- D8 /7 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">D8
   <td rowspan="2">
   <td>mf
   <td>&ne;11
   <td rowspan="2" class="highlight">7
   <td rowspan="2">00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td rowspan="2">FDIVR
   <td>Msr
   <td>
   <td>
   <td rowspan="2">
   <td rowspan="2">x87fpu
   <td rowspan="2">arith
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">0123
   <td rowspan="2">.1..
   <td rowspan="2">0.23
   <td rowspan="2">
   <td rowspan="2">Reverse Divide
  </tr>
  <tr>
   <td>
   <td>=11
   <td>ST
   <td>STi
   <td>
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</td></tr></tbody>

 <tbody>			<!-- DB /0 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">DB
   <td rowspan="2">
   <td>mF
   <td>&ne;11
   <td rowspan="2" class="highlight">0
   <td>00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td>FILD
   <td>Mdi
   <td>
   <td>
   <td>
   <td rowspan="2">x87fpu
   <td rowspan="2">datamov
   <td rowspan="2">
   <td>
   <td rowspan="2">0123
   <td rowspan="2">.1..
   <td rowspan="2">0.23
   <td rowspan="2">
   <td>Load Integer
  </tr>
  <tr>
   <td>
   <td>=11
   <td>PP+
   <td>FCMOVNB
   <td>ST
   <td>STi
   <td>
   <td>
   <td>.......c
   <td>Floating-Point Conditional Move
  </tr>
 </tbody>

 <tbody>			<!-- DB /1 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">DB
   <td rowspan="2">
   <td>mF
   <td>&ne;11
   <td rowspan="2" class="highlight">1
   <td>P4++
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td>FISTTP
   <td>Mdi
   <td>
   <td>
   <td>sse3
   <td rowspan="2">x87fpu
   <td>conver
   <td rowspan="2">
   <td>
   <td>0123
   <td>.1..
   <td>0.23
   <td>.0..
   <td>Store Integer with Truncation
  </tr>
  <tr>
   <td>
   <td>=11
   <td>PP+
   <td>FCMOVNE
   <td>ST
   <td>STi
   <td>
   <td>
   <td>datamov
   <td>....z...
   <td>0123
   <td>.1..
   <td>0.23
   <td>
   <td>Floating-Point Conditional Move
  </tr>
 </tbody>

 <tbody>			<!-- DB /2 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">DB
   <td rowspan="2">
   <td>mF
   <td>&ne;11
   <td rowspan="2" class="highlight">2
   <td>00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td>FIST
   <td>Mdi
   <td>
   <td>
   <td>
   <td rowspan="2">x87fpu
   <td rowspan="2">datamov
   <td rowspan="2">
   <td>
   <td rowspan="2">0123
   <td rowspan="2">.1..
   <td rowspan="2">0.23
   <td rowspan="2">
   <td>Store Integer
  </tr>
  <tr>
   <td>
   <td>=11
   <td>PP+
   <td>FCMOVNBE
   <td>ST
   <td>STi
   <td>
   <td>
   <td>....z..c
   <td>Floating-Point Conditional Move
  </tr>
 </tbody>

 <tbody>			<!-- DB /3 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">DB
   <td rowspan="2">
   <td>mF
   <td>&ne;11
   <td rowspan="2" class="highlight">3
   <td>00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td>FISTP
   <td>Mdi
   <td>
   <td>
   <td>
   <td rowspan="2">x87fpu
   <td rowspan="2">datamov
   <td rowspan="2">
   <td>
   <td rowspan="2">0123
   <td rowspan="2">.1..
   <td rowspan="2">0.23
   <td rowspan="2">
   <td>Store Integer
  </tr>
  <tr>
   <td>
   <td>=11
   <td>PP+
   <td>FCMOVNU
   <td>ST
   <td>STi
   <td>
   <td>
   <td>......p.
   <td>Floating-Point Conditional Move
  </tr>
 </tbody>

 <tbody>			<!-- DB /4 -->
  <tr>
   <td rowspan="15">
   <td rowspan="2">
   <td rowspan="15">DB
   <td>
   <td rowspan="15">
   <td>&ne;11
   <td rowspan="15" class="highlight">4
   <td>00+
   <td>
   <td>
   <td>
   <td>
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
  </tr>
  <tr>
   <td rowspan="3">E0
   <td rowspan="14">=11
   <td rowspan="2">00
   <td rowspan="13">D
   <td rowspan="14">R
   <td rowspan="14">3
   <td rowspan="14">
   <td>FNENI
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">x87fpu
   <td rowspan="2">control
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">?
   <td rowspan="2">?
   <td rowspan="2">?
   <td rowspan="2">?
   <td rowspan="2">Enable NPX Interrupt
  </tr>
  <tr>
   <td>9B
   <td>FENI
  </tr>
  <tr>
   <td rowspan="2">
   <td>01+
   <td>FNENI <i>nop</i><a href="#gen_note7" title="IA-32 Intel&reg; Architecture Software Developer's Manual Volume 3: System Programming Guide, IA-32 Compatibility, x87 FPU"><sup>7</sup></a>
   <td>
   <td>
   <td>
   <td>
   <td>obsol
   <td>control
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Treated as Integer NOP
  </tr>
  <tr>
   <td rowspan="3">E1
   <td rowspan="2">00
   <td>FNDISI
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">x87fpu
   <td rowspan="2">control
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">?
   <td rowspan="2">?
   <td rowspan="2">?
   <td rowspan="2">?
   <td rowspan="2">Disable NPX Interrupt
  </tr>
  <tr>
   <td>9B
   <td>FDISI
  </tr>
  <tr>
   <td rowspan="2">
   <td>01+
   <td>FNDISI <i>nop</i><a href="#gen_note7" title="IA-32 Intel&reg; Architecture Software Developer's Manual Volume 3: System Programming Guide, IA-32 Compatibility, x87 FPU"><sup>7</sup></a>
   <td>
   <td>
   <td>
   <td>
   <td>obsol
   <td>control
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Treated as Integer NOP
  </tr>
  <tr>
   <td rowspan="2">E2
   <td rowspan="4">00+
   <td>FNCLEX
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="6">x87fpu
   <td rowspan="6">control
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">0123
   <td rowspan="2">
   <td rowspan="2">Clear Exceptions
  </tr>
  <tr>
   <td>9B
   <td>FCLEX
  </tr>
  <tr>
   <td>
   <td rowspan="2">E3
   <td>FNINIT
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">0123
   <td rowspan="2">0123
   <td rowspan="2">
   <td rowspan="2">0000
   <td rowspan="2">Initialize Floating-Point Unit
  </tr>
  <tr>
   <td>9B
   <td>FINIT
  </tr>
  <tr>
   <td>
   <td rowspan="3">E4
   <td rowspan="2">02
   <td>FNSETPM
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">?
   <td rowspan="2">?
   <td rowspan="2">?
   <td rowspan="2">?
   <td rowspan="2">Set Protected Mode
  </tr>
  <tr>
   <td>9B
   <td>FSETPM
  </tr>
  <tr>
   <td rowspan="2">
   <td>03+
   <td>FNSETPM <i>nop</i><a href="#gen_note7" title="IA-32 Intel&reg; Architecture Software Developer's Manual Volume 3: System Programming Guide, IA-32 Compatibility, x87 FPU"><sup>7</sup></a>
   <td>
   <td>
   <td>
   <td>
   <td>obsol
   <td>control
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Treated as Integer NOP
  </tr>
  <tr>
   <td>E5
   <td>02
   <td>U<a href="#gen_note8" title="sandpile.org -- IA-32 architecture -- ESC (FP) opcodes"><sup>8</sup></a>
   <td>FRSTPM
   <td>
   <td>
   <td>
   <td>
   <td>x87fpu
   <td>control
   <td>
   <td>
   <td>?
   <td>?
   <td>?
   <td>?
   <td>Reset Protected Mode
  </tr>
 </tbody>

 <tbody>			<!-- DB /5 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">DB
   <td rowspan="2">
   <td rowspan="2">
   <td>&ne;11
   <td rowspan="2" class="highlight">5
   <td>00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td>FLD
   <td>Mer
   <td>
   <td>
   <td>
   <td rowspan="2">x87fpu
   <td>datamov
   <td>
   <td>
   <td>0123
   <td>.1..
   <td>0.23
   <td>
   <td>Load Floating Point Value
  </tr>
  <tr>
   <td>=11
   <td>PP+
   <td>FUCOMI
   <td>ST
   <td>STi
   <td>
   <td>
   <td>compar
   <td>
   <td>
   <td>....z.pc<br>.1.. <!-- br because of Opera - it doesn't break it naturally -->
   <td>....z.pc<br>.1.. <!-- br because of Opera - it doesn't break it naturally -->
   <td>
   <td>
   <td>Compare Floating Point Values and Set EFLAGS
  </tr>
 </tbody>

 <tbody>			<!-- DB /6 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">DB
   <td rowspan="2">
   <td rowspan="2">
   <td>&ne;11
   <td rowspan="2" class="highlight">6
   <td>00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
  </tr>
  <tr>
   <td>=11
   <td>PP+
   <td>FCOMI
   <td>ST
   <td>STi
   <td>
   <td>
   <td>x87fpu
   <td>compar
   <td>
   <td>
   <td>....z.pc<br>.1.. <!-- br because of Opera - it doesn't break it naturally -->
   <td>....z.pc<br>.1.. <!-- br because of Opera - it doesn't break it naturally -->
   <td>
   <td>
   <td>Compare Floating Point Values and Set EFLAGS
  </tr>
 </tbody>

 <tbody>			<!-- DB /7 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">DB
   <td rowspan="2">
   <td rowspan="2">
   <td>&ne;11
   <td rowspan="2" class="highlight">7
   <td rowspan="2">00+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td>FSTP
   <td>Mer
   <td>
   <td>
   <td>
   <td>x87fpu
   <td>datamov
   <td>
   <td>
   <td>0123
   <td>.1..
   <td>0.23
   <td>
   <td>Store Floating Point Value
  </tr>
  <tr>
   <td>=11
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
  </tr>
 </tbody>
</table>

<table cellpadding="2">
 <caption class="breakbefore"><a name="2byte">2-byte opcodes</a></caption>

 <col span="2">
 <col class="highlight">		<!-- highlight primary opcode -->

 <thead>
  <tr>
   <td title="Fixed Prefix 1">p1
   <td title="Fixed Prefix 2">p2
   <td title="Primary Opcode">po
   <td title="Secondary Opcode">so
   <td title="Opcode Fields">flds
   <td title="Mod Field">mod
   <td title="Register/Opcode Field">o
   <td title="Introduced with the Processor">proc
   <td title="Status">st&nbsp;
   <td title="Mode of Operation">m
   <td title="Ring Level">rl
   <td title="Lock Prefix">l
   <td title="Instruction Mnemonic">mnemonic&nbsp;&nbsp;&nbsp;
   <td title="Operand 1">op1&nbsp;
   <td title="Operand 2">op2&nbsp;
   <td title="Operand 1">op3&nbsp;
   <td title="Instruction Extension Group">iext
   <td title="Main Group">group1
   <td title="Sub-group">group&nbsp;2
   <td title="Sub-sub-group">group&nbsp;3
   <td title="Tested Flags">tested&nbsp;f
   <td title="Modified Flags">modif&nbsp;f&nbsp;
   <td title="Defined Flags">def&nbsp;f&nbsp;&nbsp;&nbsp;
   <td title="Undefined Flags">undef&nbsp;f&nbsp;
   <td title="Flags Values">f&nbsp;values
<td title="Description, Notes">description,&nbsp;notes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </tr>
 </thead>

 <tbody>			<!-- 0F00 /0 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">0F
   <td rowspan="2">00
   <td rowspan="2">
   <td rowspan="2">
   <td>&ne;11
   <td rowspan="2" class="highlight">0
   <td rowspan="2">02+
   <td rowspan="2">D
   <td rowspan="2">P
   <td rowspan="2">3
   <td rowspan="2">
   <td rowspan="2">SLDT
   <td>Mw
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">system
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">Store Local Descriptor Table Register
  </tr>
  <tr>
   <td>=11
   <td>Evqp
  </tr>
 </tbody>

 <tbody>			<!-- 0F00 /1 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">0F
   <td rowspan="2">00
   <td rowspan="2">
   <td rowspan="2">
   <td>&ne;11
   <td rowspan="2" class="highlight">1
   <td rowspan="2">02+
   <td rowspan="2">D
   <td rowspan="2">P
   <td rowspan="2">3
   <td rowspan="2">
   <td rowspan="2">STR
   <td>Mw
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">system
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">Store Task Register
  </tr>
  <tr>
   <td>=11
   <td>Evqp
  </tr>
 </tbody>

 <tbody>			<!-- 0F00 /2 -->
  <tr>
   <td>
   <td>0F
   <td>00
   <td>
   <td>
   <td>
   <td class="highlight">2
   <td>02+
   <td>D
   <td>P
   <td>0
   <td>
   <td>LLDT
   <td>Ew
   <td>
   <td>
   <td>
   <td>system
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Load Local Descriptor Table Register
  </tr>
 </tbody>

 <tbody>			<!-- 0F00 /3 -->
  <tr>
   <td>
   <td>0F
   <td>00
   <td>
   <td>
   <td>
   <td class="highlight">3
   <td>02+
   <td>D
   <td>P
   <td>0
   <td>
   <td>LTR
   <td>Ew
   <td>
   <td>
   <td>
   <td>system
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Load Task Register
  </tr>
 </tbody>

 <tbody>			<!-- 0F00 /4 -->
  <tr>
   <td>
   <td>0F
   <td>00
   <td>
   <td>
   <td>
   <td class="highlight">4
   <td>02+
   <td>D
   <td>P
   <td>3
   <td>
   <td>VERR
   <td>Ew
   <td>
   <td>
   <td>
   <td>system
   <td>
   <td>
   <td>
   <td>....z...
   <td>....z...
   <td>
   <td>
   <td>Verify a Segment for Reading
  </tr>
 </tbody>

 <tbody>			<!-- 0F00 /5 -->
  <tr>
   <td>
   <td>0F
   <td>00
   <td>
   <td>
   <td>
   <td class="highlight">5
   <td>02+
   <td>D
   <td>P
   <td>3
   <td>
   <td>VERW
   <td>Ew
   <td>
   <td>
   <td>
   <td>system
   <td>
   <td>
   <td>
   <td>....z...
   <td>....z...
   <td>
   <td>
   <td>Verify a Segment for Writing
  </tr>
 </tbody>

 <tbody>			<!-- 0F00 /6 -->
  <tr>
   <td>
   <td>0F
   <td>00
   <td>
   <td>
   <td>
   <td class="highlight">6
   <td>64I+
   <td>D
   <td>?
   <td>3
   <td>
   <td>JMPE
   <td>Ev
   <td>
   <td>
   <td>
   <td>?
   <td>?
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Jump to IA-64 Instruction Set
  </tr>
 </tbody>

 <tbody>			<!-- 0F01 /0 -->
  <tr>
   <td rowspan="5">
   <td rowspan="5">0F
   <td rowspan="5">01
   <td>
   <td rowspan="5">
   <td>&ne;11
   <td rowspan="5" class="highlight">0
   <td>02+
   <td rowspan="5">D
   <td rowspan="5">R
   <td>3
   <td rowspan="5">
   <td>SGDT
   <td>Ms
   <td>
   <td>
   <td>
   <td>system
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Store Global Descriptor Table Register
  </tr>
  <tr>
   <td>C1
   <td rowspan="4">=11
   <td rowspan="4">P4++
   <td rowspan="4">?
   <td>VMCALL
   <td>
   <td>
   <td>
   <td rowspan="4">vmx
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">O..SZAPC
   <td rowspan="4">O..SZAPC
   <td rowspan="4">
   <td rowspan="4">
   <td>Call to VM monitor
  </tr>
  <tr>
   <td>C2
   <td>VMLAUNCH
   <td>
   <td>
   <td>
   <td>Launch Virtual Machine
  </tr>
  <tr>
   <td>C3
   <td>VMRESUME
   <td>
   <td>
   <td>
   <td>Resume Virtual Machine
  </tr>
  <tr>
   <td>C4
   <td>VMXOFF
   <td>
   <td>
   <td>
   <td>Leave VMX Operation
  </tr>
 </tbody>

 <tbody>			<!-- 0F01 /1 -->
  <tr>
   <td rowspan="3">
   <td rowspan="3">0F
   <td rowspan="3">01
   <td>
   <td rowspan="3">
   <td>&ne;11
   <td rowspan="3" class="highlight">1
   <td>02+
   <td rowspan="3">D
   <td rowspan="3">R
   <td rowspan="3">3
   <td rowspan="3">
   <td>SIDT
   <td>Ms
   <td>
   <td>
   <td>
   <td>system
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Store Interrupt Descriptor Table Register
  </tr>
  <tr>
   <td>C8
   <td rowspan="2">=11
   <td rowspan="2">P4++
   <td>MONITOR
   <td>
   <td>
   <td>
   <td rowspan="2">sse3
   <td rowspan="2">
   <td rowspan="2">sync
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td>Setup Monitor Address
  </tr>
  <tr>
   <td>C9
   <td>MWAIT
   <td>
   <td>
   <td>
   <td>Monitor Wait
  </tr>
 </tbody>

 <tbody>			<!-- 0F01 /2 -->
  <tr>
   <td>
   <td>0F
   <td>01
   <td>
   <td>
   <td>
   <td class="highlight">2
   <td>02+
   <td>D
   <td>R
   <td>0
   <td>
   <td>LGDT
   <td>Ms
   <td>
   <td>
   <td>
   <td>system
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Load Global Descriptor Table Register
  </tr>
 </tbody>

 <tbody>			<!-- 0F01 /3 -->
  <tr>
   <td>
   <td>0F
   <td>01
   <td>
   <td>
   <td>
   <td class="highlight">3
   <td>02+
   <td>D
   <td>R
   <td>0
   <td>
   <td>LIDT
   <td>Ms
   <td>
   <td>
   <td>
   <td>system
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Load Interrupt Descriptor Table Register
  </tr>
 </tbody>

 <tbody>			<!-- 0F01 /4 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">0F
   <td rowspan="2">01
   <td rowspan="2">
   <td rowspan="2">
   <td>&ne;11
   <td rowspan="2" class="highlight">4
   <td rowspan="2">02+
   <td rowspan="2">D
   <td rowspan="2">R
   <td rowspan="2">3
   <td rowspan="2">
   <td rowspan="2">SMSW
   <td>Mw
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">system
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">Store Machine Status Word
  </tr>
  <tr>
   <td>=11
   <td>Evqp
  </tr>
 </tbody>

 <tbody>			<!-- 0F01 /5 -->
  <tr>
   <td>
   <td>0F
   <td>01
   <td>
   <td>
   <td>
   <td class="highlight">5
   <td>
   <td>
   <td>
   <td>
   <td>
   <td colspan="4"><i>invalid</i>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
  </tr>
 </tbody>

 <tbody>			<!-- 0F01 /6 -->
  <tr>
   <td>
   <td>0F
   <td>01
   <td>
   <td>
   <td>
   <td class="highlight">6
   <td>02+
   <td>D
   <td>R
   <td>0
   <td>
   <td>LMSW
   <td>Ew
   <td>
   <td>
   <td>
   <td>system
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>
   <td>Load Machine Status Word
  </tr>
 </tbody>

 <tbody>			<!-- 0F01 /7 -->
  <tr>
   <td rowspan="2">
   <td rowspan="2">0F
   <td rowspan="2">01
   <td>
   <td rowspan="2">
   <td>&ne;11
   <td rowspan="2" class="highlight">7
   <td>04+
   <td rowspan="2">D
   <td>R
   <td rowspan="2">0
   <td rowspan="2">
   <td>INVLPG
   <td>M
   <td>
   <td>
   <td>
   <td rowspan="2">system
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td rowspan="2">
   <td>Invalidate TLB Entry
  </tr>
  <tr>
   <td>F8
   <td>=11
   <td>64E+
   <td>P
   <td>SWAPGS
   <td>
   <td>
   <td>
   <td>
   <td>Swap GS Base Register
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</td></tr></tbody>

 <tbody>			<!-- 0F10-0F18 -->
  <tr>
   <td>
   <td>0F
   <td colspan="2">10- 18 <!-- Firefox needs this space in order to break it -->
   <td>
   <td>
   <td>
   <td>P3+
   <td>D
   <td>R
   <td>3
   <td>
   <td colspan="14"><a href="#iext">Instruction Extensions Opcodes</a>
  </tr>
 </tbody>

 <tbody><tr><td colspan="26">&nbsp;</td></tr></tbody>

 <tbody>			<!-- 0F24 -->
  <tr>
   <td>
   <td>0F
   <td>24
   <td>
   <td>
   <td>
   <td>r
   <td>03- 04 <!-- Firefox needs this space in order to break it -->
   <td>D
   <td>R
   <td>0
   <td>
   <td>MOV
   <td>Rd
   <td>Td
   <td>
   <td>
   <td>system
   <td>
   <td>
   <td>
   <td>o..szapc
   <td>
   <td>o..szapc
   <td>
   <td>Move to/from Test Register
  </tr>
 </tbody>

 <tbody>			<!-- 0F26 -->
  <tr>
   <td>
   <td>0F
   <td>26
   <td>
   <td>
   <td>
   <td>r
   <td>03- 04 <!-- Firefox needs this space in order to break it -->
   <td>D
   <td>R
   <td>0
   <td>
   <td>MOV
   <td>Td
   <td>Rd
   <td>
   <td>
   <td>system
   <td>
   <td>
   <td>
   <td>o..szapc
   <td>
   <td>o..szapc
   <td>
   <td>Move to/from Test Register
  </tr>
 </tbody>
</table>

<table cellpadding="2">
 <caption class="breakbefore"><a name="iext">Instruction Extensions Opcodes</a></caption>

 <col span="2">
 <col class="highlight">		<!-- highlight primary opcode -->

 <thead>
  <tr>
   <td title="Fixed Prefix 1">p1
   <td title="Fixed Prefix 2">p2
   <td title="Primary Opcode">po
   <td title="Secondary Opcode">so
   <td title="Opcode Fields">flds
   <td title="Mod Field">mod
   <td title="Register/Opcode Field">o
   <td title="Introduced with the Processor">proc
   <td title="Status">st&nbsp;
   <td title="Mode of Operation">m
   <td title="Ring Level">rl
   <td title="Lock Prefix">l
   <td title="Instruction Mnemonic">mnemonic&nbsp;&nbsp;&nbsp;
   <td title="Operand 1">op1&nbsp;
   <td title="Operand 2">op2&nbsp;
   <td title="Operand 1">op3&nbsp;
   <td title="Instruction Extension Group">iext
   <td title="Main Group">group1
   <td title="Sub-group">group&nbsp;2
   <td title="Sub-sub-group">group&nbsp;3
   <td title="Tested Flags">tested&nbsp;f
   <td title="Modified Flags">modif&nbsp;f&nbsp;
   <td title="Defined Flags">def&nbsp;f&nbsp;&nbsp;&nbsp;
   <td title="Undefined Flags">undef&nbsp;f&nbsp;
   <td title="Flags Values">f&nbsp;values
<td title="Description, Notes">description,&nbsp;notes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </tr>
 </thead>

 <tbody>			<!-- 0F10 -->
  <tr>
   <td>
   <td rowspan="4">0F
   <td rowspan="4">10
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">r
   <td rowspan="2">P3+
   <td rowspan="4">D
   <td rowspan="4">R
   <td rowspan="4">3
   <td rowspan="4">
   <td>MOVUPS
   <td>Vps
   <td>Wps
   <td>
   <td rowspan="2">sse1
   <td rowspan="2">
   <td rowspan="2">simdfp
   <td rowspan="2">datamov
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">
   <td>Move Unaligned Packed Single-Precision Floating-Point Values
  </tr>
  <tr>
   <td>F3
   <td>MOVSS
   <td>Vss
   <td>Wss
   <td>
   <td>Move Scalar Single-Precision Floating-Point Values
  </tr>
  <tr>
   <td>66
   <td rowspan="2">P4+
   <td>MOVUPD
   <td>Vpd
   <td>Wpd
   <td>
   <td rowspan="2">sse2
   <td rowspan="2">
   <td rowspan="2">pcksclr
   <td rowspan="2">datamov
   <td>Move Unaligned Packed Double-Precision Floating-Point Values
  </tr>
  <tr>
   <td>F2
   <td>MOVSD
   <td>Vsd
   <td>Wsd
   <td>
   <td>Move Scalar Double-Precision Floating-Point Value
  </tr>
 </tbody>

 <tbody>			<!-- 0F11 -->
  <tr>
   <td>
   <td rowspan="4">0F
   <td rowspan="4">11
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">r
   <td rowspan="2">P3+
   <td rowspan="4">D
   <td rowspan="4">R
   <td rowspan="4">3
   <td rowspan="4">
   <td>MOVUPS
   <td>Wps
   <td>Vps
   <td>
   <td rowspan="2">sse1
   <td rowspan="2">
   <td rowspan="2">simdfp
   <td rowspan="2">datamov
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">
   <td rowspan="4">
   <td>Move Unaligned Packed Single-Precision Floating-Point Values
  </tr>
  <tr>
   <td>F3
   <td>MOVSS
   <td>Wss
   <td>Vss
   <td>
   <td>Move Scalar Single-Precision Floating-Point Values
  </tr>
  <tr>
   <td>66
   <td rowspan="2">P4+
   <td>MOVUPD
   <td>Wpd
   <td>Vpd
   <td>
   <td rowspan="2">sse2
   <td rowspan="2">
   <td rowspan="2">pcksclr
   <td rowspan="2">datamov
   <td>Move Unaligned Packed Double-Precision Floating-Point Values
  </tr>
  <tr>
   <td>F2
   <td>MOVSD
   <td>Wsd
   <td>Vsd
   <td>
   <td>Move Scalar Double-Precision Floating-Point Value
  </tr>
 </tbody>

 <tbody>			<!-- 0F12 -->
  <tr>
   <td rowspan="2">
   <td rowspan="5">0F
   <td rowspan="5">12
   <td rowspan="5">
   <td rowspan="5">
   <td>&ne;11
   <td rowspan="5">r
   <td rowspan="2">P3+
   <td rowspan="5">D
   <td rowspan="5">R
   <td rowspan="5">3
   <td rowspan="5">
   <td>MOVLPS
   <td>Vp
   <td>Mq
   <td>
   <td rowspan="2">sse1
   <td rowspan="2">
   <td rowspan="2">simdfp
   <td rowspan="2">datamov
   <td rowspan="5">
   <td rowspan="5">
   <td rowspan="5">
   <td rowspan="5">
   <td rowspan="5">
   <td>Move Low Packed Single-Precision Floating-Point Values
  </tr>
  <tr>
   <td>=11
   <td>MOVHLPS
   <td>Vps
   <td>Vps
   <td>
   <td>Move Packed Single-Precision Floating-Point Values High to Low
  </tr>
  <tr>
   <td>66
   <td rowspan="3">
   <td>P4+
   <td>MOVLPS
   <td>Vp
   <td>Mq
   <td>
   <td>sse2
   <td>
   <td>pcksclr
   <td>datamov
   <td>Move Low Packed Single-Precision Floating-Point Values
  </tr>
  <tr>
   <td>F2
   <td rowspan="2">P4++
   <td>MOVDDUP
   <td>Vq
   <td>Wq
   <td>
   <td rowspan="2">sse3
   <td rowspan="2">
   <td rowspan="2">simdfpd
   <td rowspan="2">
   <td>Move One Double-FP and Duplicate
  </tr>
  <tr>
   <td>F3
   <td>MOVSLDUP
   <td>Vps
   <td>Wps
   <td>
   <td>Move Packed Single-FP Low and Duplicate
  </tr>
 </tbody>

</table>

<h3 class="breakbefore">General notes:</h3>
<div><a name="gen_note1"><sup>1</sup></a>&nbsp;OPCODE.LST, Revision 4.51, 15 Oct 1999 &copy; Potemkin's Hackers Group 1994...1999</div>
<div><a name="gen_note2"><sup>2</sup></a>&nbsp;How to optimize for the Pentium family of microprocessors, By Agner Fog, Ph.D., Copyright &copy; 1996 - 2003</div>
<div><a name="gen_note3"><sup>3</sup></a>&nbsp;sandpile.org -- IA-32 architecture -- opcode groups</div>
<div><a name="gen_note4"><sup>4</sup></a>&nbsp;IA-32 Intel&reg; Architecture Software Developer's Manual Volume 3: System Programming Guide, Interrupt and Exception Handling</div>
<div><a name="gen_note5"><sup>5</sup></a>&nbsp;AMD64 Architecture Programmer's Manual Volume 3, Table One-Byte Opcodes</div>
<div><a name="gen_note6"><sup>6</sup></a>&nbsp;Christian Ludloff wrote: <q>Unlike INT 1 (CDh,01h), INT1 (F1h) doesn't perform the IOPL or DPL check and it can't be redirected via the TSS32.IRB.</q></div>
<div><a name="gen_note7"><sup>7</sup></a>&nbsp;IA-32 Intel&reg; Architecture Software Developer's Manual Volume 3: System Programming Guide, IA-32 Compatibility, x87 FPU</div>
<div><a name="gen_note8"><sup>8</sup></a>&nbsp;sandpile.org -- IA-32 architecture -- ESC (FP) opcodes</div>

<h3>Notes for the Ring Level, used in case of <i>f</i>&nbsp;mark:</h3>
<div><a name="r_note1"><sup>1</sup></a>&nbsp;rFlags.IOPL</div>
<div><a name="r_note2"><sup>2</sup></a>&nbsp;CR4.TSD (bit&nbsp;2)</div>

<hr class="noprint">
<h2 class="noprint"><a name="coldesc">Columns description:</a></h2>

<table cellpadding="2" class="noprint">

 <tbody>
  <tr>
   <td><b>p1</b>
   <td><b>p2</b>
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st&nbsp;
   <td>m
   <td>rl
   <td>l
   <td>mnemonic&nbsp;&nbsp;&nbsp;
   <td>op1&nbsp;
   <td>op2&nbsp;
   <td>op3&nbsp;
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f&nbsp;
   <td>def&nbsp;f&nbsp;&nbsp;&nbsp;
   <td>undef&nbsp;f&nbsp;
   <td>f&nbsp;values
   <td>description,&nbsp;notes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Fixed&nbsp;Prefix&nbsp;1,&nbsp;2</b><br>
   Both prefixes don't always match the meaning of a prefix from the Intel manuals. These are simply the values which always precede the primary opcode.<br>
   &bull;&nbsp;prefix&nbsp;2 is often the first byte of 2-byte opcodes (0Fhex), prefix&nbsp;1 holds a prefix of SSEs then<br>
   &bull;&nbsp;prefix&nbsp;2 holds the opcode of WAIT (FWAIT) instruction in case of waiting x87&nbsp;FPU instructions<br>
   &bull;&nbsp;prefix&nbsp;2 holds a preceding value in some special cases (e.g. PAUSE)<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td><b>po</b>
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Primary&nbsp;Opcode</b><br>
   1.&nbsp;Basic opcode. It is always present if the value is not a prefix.<br>
   2.&nbsp;Lower limit of skipped opcode range, if the Mnemonic column contains a reference to an opcode group (e.g. x87&nbsp;FPU opcodes).<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td><b>so</b>
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Secondary&nbsp;Opcode</b><br>
   1.&nbsp;Fixed appended value to the primary opcode.<br>
   &nbsp;&nbsp;&nbsp;Used:<br>
   &nbsp;&nbsp;&nbsp;&bull;&nbsp;with some of x87&nbsp;FPU instructions<br>
   &nbsp;&nbsp;&nbsp;&bull;&nbsp;with some of new instructions (e.g. VMX instruction extensions)<br>
   &nbsp;&nbsp;&nbsp;&bull;&nbsp;in some special cases (e.g. AAM or AAD instruction)<br>
   2.&nbsp;The higher limit of skipped opcode range.<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td><b>flds</b>
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Opcode&nbsp;Fields</b><br>
   The marking of present primary opcode bit fields:<br>
   <i>case insensitive:</i><br>
   &bull;&nbsp;<b>+r</b> means a register code, from 0 through 7, added to the basic value of the primary opcode<br>
   <i>case sensitive: if a letter of the marking is lower-case, it means the appropriate bit is cleared, otherwise is set</i><br>
   &bull;&nbsp;<b>w</b> means bit&nbsp;w (bit index 0, operand size) is present; may be combined with bits <b>d</b> and <b>s</b><br>
   &bull;&nbsp;<b>s</b> means bit&nbsp;s (bit index 1, Sign-extend); may be combined with bit <b>w</b><br>
   &bull;&nbsp;<b>d</b> means bit&nbsp;d (bit index 1, Direction); may be combined with bit <b>w</b><br>
   &bull;&nbsp;<b>tttn</b> means bit&nbsp;field&nbsp;tttn (4 bits, bit index 0, condition); used only with conditional instructions<br>
   &bull;&nbsp;<b>sr</b> means segment register specifier - a code of original four segment registers (2 bits, bit index 3)<br>
   &bull;&nbsp;<b>sre</b> means segment register specifier - a code of all segment registers (3 bits, bit index 0 or 3)<br>
   &bull;&nbsp;<b>mf</b> means bit field MF - memory format (2 bits, bit index 1); used only with x87&nbsp;FPU instructions coded with second floating-point instruction format<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td><b>mod</b>
   <td>o
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Mod&nbsp;Field</b><br>
   The value of the Mod field in ModR/M byte.<br>
   Used:<br>
   &bull;&nbsp;most often with x87&nbsp;FPU instructions<br>
   &bull;&nbsp;some of newer instructions (e.g. SFENCE, CLFLUSH)<br>
   &bull;&nbsp;in some special cases, when the operand type or mnemonic changes according to this value (e.g. SMSW, MOVLPS/MOVHLPS)<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td><b>o</b>
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Register/Opcode&nbsp;Field</b><br>
   The value of the opcode extension (values from 0 through 7) or indicates using <b>r</b>&nbsp;mark that the ModR/M byte contains a register operand and an r/m operand.<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td><b>proc</b>
   <td>st
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Introduced&nbsp;with&nbsp;the&nbsp;Processor</b><br>
   Marks the processor of the instruction introduction:<br>
   &bull;&nbsp;<b>00</b>&nbsp;8086<br>
   &bull;&nbsp;<b>01</b>&nbsp;80186<br>
   &bull;&nbsp;<b>02</b>&nbsp;80286<br>
   &bull;&nbsp;<b>03</b>&nbsp;80386<br>
   &bull;&nbsp;<b>04</b>&nbsp;80486<br>
   &bull;&nbsp;<b>P0</b>&nbsp;Pentium&nbsp;(plain)<br>
   &bull;&nbsp;<b>PP</b>&nbsp;Pentium&nbsp;Pro<br>
   &bull;&nbsp;<b>P2</b>&nbsp;Pentium&nbsp;II<br>
   &bull;&nbsp;<b>P3</b>&nbsp;Pentium&nbsp;III<br>
   &bull;&nbsp;<b>P4</b>&nbsp;Pentium&nbsp;4<br>
   &bull;&nbsp;<b>64E</b>&nbsp;Intel&nbsp;Processor with Extended Memory 64-bit Technology<br>
   &bull;&nbsp;<b>64I</b>&nbsp;Intel&nbsp;Itanium Processor (only JMPE)<br>
   Optional markings, which may follow the main marking:<br>
   &bull;&nbsp;if the processor marking is a range (e.g.&nbsp;<b>03-04</b>), it means that the instruction is unsupported in next generations of the processor (only the Move to/from Test Register instruction)<br>
   &bull;&nbsp;<b>+</b>&nbsp;(e.g.&nbsp;<b>00+</b>) the instruction is supported in any of posterior processors, including <b>64E</b> processor, if the next row doesn't explicitly say otherwise (e.g. PUSH&nbsp;ES)<br>
   &bull;&nbsp;<b>++</b>&nbsp;(e.g.&nbsp;<b>P4++</b>) same meaning, but only in the latter steppings of the processor (e.g. SSE3 instruction extensions)<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td><b>st</b>
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Status</b><br>
   Marks how is the instruction documented in the Intel manuals:<br>
   &bull;&nbsp;<b>D</b>&nbsp;fully documented; it can contain a reference to and a title with the chapter, where the instruction is documented, if it may be unclear<br>
   &bull;&nbsp;<b>M</b>&nbsp;only marginally (e.g. meaning of prefix 66hex when used with SSE instruction extensions)<br>
   &bull;&nbsp;<b>U</b>&nbsp;undocumented at all; it should contain a reference to and a title with the source (e.g. SALC, INT1)<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td><b>m</b>
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Mode&nbsp;of&nbsp;Operation</b><br>
   Marks the mode, in which is the instruction valid:<br>
   &bull;&nbsp;<b>R</b>&nbsp;valid in real and protected mode; SMM is not taken into account<br>
   &bull;&nbsp;<b>P</b>&nbsp;valid only in protected mode; SMM is not taken into account<br>
   &bull;&nbsp;<b>S</b>&nbsp;valid only in SMM (only RSM)<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td>m
   <td><b>rl</b>
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Ring&nbsp;Level</b><br>
   The ring level, from which is the instruction valid (3 or 0), or indicates using <b>f</b>&nbsp;mark that the level depends on a flag(s) (e.g. IN: rFLAGS.IOPL).<br>
   It should contain a title with and a reference to the description of that flag, if the flag is not complex. The title is useful in electronic use, the reference is necessary in printed version.<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td><b>l</b>
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Lock&nbsp;Prefix</b><br>
   If the instruction is not valid with the lock prefix, this column is blank, otherwise it holds <b>L</b> mark.<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td>l
   <td><b>mnemonic</b>
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Instruction&nbsp;Mnemonic</b><br>
   1.&nbsp;The instruction mnemonic itself. It is followed by alternative mnemonic (e.g. WAIT-FWAIT), if any.<br>
   &nbsp;&nbsp;&nbsp;If there is no mnemonic, it holds additional information about the mnemonic or instruction:<br>
   &nbsp;&nbsp;&nbsp;&bull;&nbsp;<b>no&nbsp;mnemonic</b>&nbsp;there is no mnemonic for the opcode (e.g. some of prefixes); can be followed by my suggestion in parentheses<br>
   &nbsp;&nbsp;&nbsp;&bull;&nbsp;<b>invalid</b>&nbsp;the opcode is invalid; this option is not used everywhere the opcode is invalid, but only in some cases<br>
   &nbsp;&nbsp;&nbsp;&bull;&nbsp;<b>undefined</b>&nbsp;the behaviour of the instruction is undefined (e.g. SALC)<br>
   &nbsp;&nbsp;&nbsp;&bull;&nbsp;<b>null</b>&nbsp;(only prefixes) the prefix has no meaning (no operation)<br>
   &nbsp;&nbsp;&nbsp;If there is a mnemonic, it can hold additional attributes of the instruction:<br>
   &nbsp;&nbsp;&nbsp;&bull;&nbsp;<b>alias</b>&nbsp;the instruction is an alias to another instruction (e.g. SAL); the attribute should be a reference to that instruction and the title should contain the referenced opcode<br>
   &nbsp;&nbsp;&nbsp;&bull;&nbsp;<b>partial&nbsp;alias</b>&nbsp;means not true alias (e.g. INT1); it should contain a reference to and a title with the differences between referenced instructions<br>
   &nbsp;&nbsp;&nbsp;&bull;&nbsp;<b>nop</b>&nbsp;the instruction is treated as integer NOP instruction (only obsolete x87&nbsp;FPU instructions); it should contain a reference to and the title with the source<br>
   2.&nbsp;A reference to an instruction group (e.g. x87&nbsp;FPU opcodes).<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td><b>op1</b>
   <td><b>op2</b>
   <td><b>op3</b>
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Operand&nbsp;1,&nbsp;2,&nbsp;3</b><br>
   The code of the first, second and third operand, if any. These codes are the same like those ones used in the Opcode Map in the Intel manual.<br>
   If the code is printed using italic, the operand is not explicitly present in the instruction (e.g. FCOM with mod=11).<br>
   There are additionally the following codes:<br>
   <i>for general-purpose instructions</i><br>
   &bull;&nbsp;<b>Z</b>&nbsp;addressing method: new method; means:<br>
   &nbsp;&nbsp;The instruction has no ModR/M byte; the three least-significant bits of the opcode byte selects a general-purpose register<br>
   &bull;&nbsp;<b>vqp</b>&nbsp;operand type: combines <b>v</b> and <b>qp</b> types and means:<br>
   &nbsp;&nbsp;Word or doubleword, depending on operand-size attribute, or quadword, promoted by REX.W, if REX is applicable<br>
   &bull;&nbsp;<b>vds</b>&nbsp;operand type: combines <b>v</b> and <b>ds</b> types and means:<br>
   &nbsp;&nbsp;Word or doubleword, depending on operand-size attribute, or doubleword, sign-extended to 64 bits, if such extension is applicable<br>
   <i>for x87&nbsp;FPU instructions</i><br>
   &bull;&nbsp;<b>wi</b>&nbsp;operand type: word-integer<br>
   &bull;&nbsp;<b>di</b>&nbsp;operand type: dword-integer<br>
   &bull;&nbsp;<b>qi</b>&nbsp;operand type: qword-integer<br>
   &bull;&nbsp;<b>sr</b>&nbsp;operand type: single-real<br>
   &bull;&nbsp;<b>dr</b>&nbsp;operand type: double-real<br>
   &bull;&nbsp;<b>er</b>&nbsp;operand type: extended-real<br>
   &bull;&nbsp;<b>e</b>&nbsp;operand type: 14/28 bytes (only FPU environment)<br>
   &bull;&nbsp;<b>s</b>&nbsp;operand type: 94/108 bytes (only FPU state)<br>
   &bull;&nbsp;<b>bcd</b>&nbsp;operand type: 80-bit packed-BCD<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td><b>iext</b>
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Instruction Extension Group</b><br>
   The instruction extension group, in which was the instruction released:<br>
   &bull;&nbsp;<b>MMX</b>&nbsp;MMX technology<br>
   &bull;&nbsp;<b>SSE1</b>&nbsp;Streaming SIMD extensions<br>
   &bull;&nbsp;<b>SSE2</b>&nbsp;Streaming SIMD extensions&nbsp;2<br>
   &bull;&nbsp;<b>SSE3</b>&nbsp;Streaming SIMD extensions&nbsp;3<br>
   &bull;&nbsp;<b>VMX</b>&nbsp;Virtualization Technology extensions<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td><b>group1</b>
   <td><b>group&nbsp;2</b>
   <td><b>group&nbsp;3</b>
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Main Group (Group1), Sub-group (Group&nbsp;2), Sub-sub-group (Group&nbsp;3)</b><br>
   Classifies the instruction among groups. These group don't match the instruction groups given by the Intel manual. One instruction may fit into more groups.<br>
   <br>
   The pattern used in the list:<br>
   <br>
   &bull;&nbsp;<i><b>main&nbsp;group&nbsp;name</b>&nbsp;full&nbsp;name</i><br>
   &nbsp;&middot;&nbsp;<i><b>sub-group&nbsp;name</b>&nbsp;full&nbsp;name</i><br>
   &nbsp;&nbsp;-&nbsp;<i><b>sub-sub-group&nbsp;name</b>&nbsp;full&nbsp;name</i><br>
   <br>
   &bull;&nbsp;<b>pref</b>&nbsp;prefix<br>
   &nbsp;&middot;&nbsp;<b>segreg</b>&nbsp;segment register<br>
   &nbsp;&middot;&nbsp;<b>branch</b>&nbsp;branch<br>
   &nbsp;&middot;&nbsp;<b>rex</b>&nbsp;REX&nbsp;prefixes<br>
   <br>
   &bull;&nbsp;<b>obsol</b>&nbsp;obsolete<br>
   &nbsp;&middot;&nbsp;<b>control</b>&nbsp;control<br>
   <br>
   &bull;&nbsp;<b>gen</b>&nbsp;general-purpose<br>
   &nbsp;&middot;&nbsp;<b>datamov</b>&nbsp;data&nbsp;movement<br>
   &nbsp;&middot;&nbsp;<b>stack</b>&nbsp;stack<br>
   &nbsp;&middot;&nbsp;<b>conver</b>&nbsp;type&nbsp;conversion<br>
   &nbsp;&middot;&nbsp;<b>arith</b>&nbsp;arithmetic<br>
   &nbsp;&nbsp;-&nbsp;<b>binary</b>&nbsp;binary<br>
   &nbsp;&nbsp;-&nbsp;<b>decimal</b>&nbsp;decimal<br>
   &nbsp;&middot;&nbsp;<b>logical</b>&nbsp;logical<br>
   &nbsp;&middot;&nbsp;<b>shftrot</b>&nbsp;shift&amp;rotate<br>
   &nbsp;&middot;&nbsp;<b>bit</b>&nbsp;bit&nbsp;manipulation<br>
   &nbsp;&middot;&nbsp;<b>branch</b>&nbsp;branch<br>
   &nbsp;&nbsp;-&nbsp;<b>near</b>&nbsp;near (defined because RET instructions don't have this information in the mnemonic)<br>
   &nbsp;&nbsp;-&nbsp;<b>far</b>&nbsp;far (same reason)<br>
   &nbsp;&nbsp;-&nbsp;<b>int</b>&nbsp;interrupt (defined because in case of BOUND it is not clear)<br>
   &nbsp;&middot;&nbsp;<b>string</b>&nbsp;string<br>
   &nbsp;&middot;&nbsp;<b>inout</b>&nbsp;I/O<br>
   &nbsp;&middot;&nbsp;<b>flgctrl</b>&nbsp;flag&nbsp;control<br>
   &nbsp;&middot;&nbsp;<b>segreg</b>&nbsp;segment&nbsp;register manipulation<br>
   &nbsp;&middot;&nbsp;<b>control</b>&nbsp;control (e.g. NOP, UD2, CPUID)<br>
   <br>
   &bull;&nbsp;<b>system</b>&nbsp;system<br>
   <br>
   &bull;&nbsp;<b>x87FPU</b>&nbsp;x87&nbsp;FPU<br>
   &nbsp;&middot;&nbsp;<b>datamov</b>&nbsp;data&nbsp;movement<br>
   &nbsp;&middot;&nbsp;<b>arith</b>&nbsp;basic&nbsp;arithmetic<br>
   &nbsp;&middot;&nbsp;<b>compar</b>&nbsp;comparison<br>
   &nbsp;&middot;&nbsp;<b>trans</b>&nbsp;transcendental<br>
   &nbsp;&middot;&nbsp;<b>ldconst</b>&nbsp;load&nbsp;constant<br>
   &nbsp;&middot;&nbsp;<b>control</b>&nbsp;control<br>
   &nbsp;&middot;&nbsp;<b>conversion</b>&nbsp;conversion (only FISTTP (SSE3))<br>
   <br>
   &bull;&nbsp;<b>sm</b>&nbsp;x87&nbsp;FPU and SIMD state management<br>
   <br>
   &bull;&nbsp;<i>for MMX instruction extensions</i><br>
   &nbsp;&middot;&nbsp;<b>datamov</b>&nbsp;data&nbsp;movement<br>
   &nbsp;&middot;&nbsp;<b>arith</b>&nbsp;packed&nbsp;arithmetic<br>
   &nbsp;&middot;&nbsp;<b>compar</b>&nbsp;comparison<br>
   &nbsp;&middot;&nbsp;<b>logical</b>&nbsp;logical<br>
   &nbsp;&middot;&nbsp;<b>shift</b>&nbsp;shift<br>
   &nbsp;&middot;&nbsp;<b>stmanag</b>&nbsp;state&nbsp;management<br>
   <br>
   &bull;&nbsp;<i>for SSE1 instruction extensions</i><br>
   &nbsp;&middot;&nbsp;<b>simdfp</b>&nbsp;SIMD single-precision floating-point<br>
   &nbsp;&nbsp;-&nbsp;<b>datamov</b>&nbsp;data&nbsp;movement<br>
   &nbsp;&nbsp;-&nbsp;<b>conver</b>&nbsp;conversion<br>
   &nbsp;&nbsp;-&nbsp;<b>arith</b>&nbsp;packed&nbsp;arithmetic<br>
   &nbsp;&nbsp;-&nbsp;<b>compar</b>&nbsp;comparison<br>
   &nbsp;&nbsp;-&nbsp;<b>logical</b>&nbsp;logical<br>
   &nbsp;&nbsp;-&nbsp;<b>shunpck</b>&nbsp;shuffle&amp;unpack<br>
   &nbsp;&middot;&nbsp;<b>simdint</b>&nbsp;64-bit SIMD integer<br>
   &nbsp;&nbsp;-&nbsp;<b>shuffle</b>&nbsp;shuffle<br>
   &nbsp;&nbsp;-&nbsp;<b>average</b>&nbsp;compute&nbsp;average<br>
   &nbsp;&nbsp;-&nbsp;<b>word</b>&nbsp;WORD&nbsp;operation<br>
   &nbsp;&nbsp;-&nbsp;<b>minmax</b>&nbsp;minimum or maximum<br>
   &nbsp;&middot;&nbsp;<b>mxcsrsm</b>&nbsp;MXCSR state management<br>
   &nbsp;&middot;&nbsp;<b>cachect</b>&nbsp;cacheability&nbsp;control<br>
   &nbsp;&middot;&nbsp;<b>pref</b>&nbsp;prefetch<br>
   &nbsp;&middot;&nbsp;<b>order</b>&nbsp;instruction&nbsp;ordering<br>
   <br>
   &bull;&nbsp;<i>for SSE2 instruction extensions</i><br>
   &nbsp;&middot;&nbsp;<b>pcksclr</b>&nbsp;packed and scalar double-precision floating-point<br>
   &nbsp;&nbsp;-&nbsp;<b>datamov</b>&nbsp;data&nbsp;movement<br>
   &nbsp;&nbsp;-&nbsp;<b>conver</b>&nbsp;conversion<br>
   &nbsp;&nbsp;-&nbsp;<b>arith</b>&nbsp;packed&nbsp;arithmetic<br>
   &nbsp;&nbsp;-&nbsp;<b>compar</b>&nbsp;comparison<br>
   &nbsp;&nbsp;-&nbsp;<b>logical</b>&nbsp;logical<br>
   &nbsp;&nbsp;-&nbsp;<b>shunpck</b>&nbsp;shuffle&amp;unpack<br>
   &nbsp;&middot;&nbsp;<b>pcksp</b>&nbsp;packed single-precision floating-point<br>
   &nbsp;&middot;&nbsp;<b>simdint</b>&nbsp;128-bit SIMD integer<br>
   &nbsp;&nbsp;-&nbsp;<b>datamov</b>&nbsp;data&nbsp;movement<br>
   &nbsp;&nbsp;-&nbsp;<b>arith</b>&nbsp;packed&nbsp;arithmetic<br>
   &nbsp;&nbsp;-&nbsp;<b>shunpck</b>&nbsp;shuffle&amp;unpack<br>
   &nbsp;&nbsp;-&nbsp;<b>shift</b>&nbsp;shift<br>
   &nbsp;&middot;&nbsp;<b>mxcsrsm</b>&nbsp;MXCSR state management<br>
   &nbsp;&middot;&nbsp;<b>cachect</b>&nbsp;cacheability&nbsp;control<br>
   &nbsp;&middot;&nbsp;<b>order</b>&nbsp;instruction&nbsp;ordering<br>
   <br>
   &bull;&nbsp;<i>for SSE3 instruction extensions</i><br>
   &nbsp;&middot;&nbsp;<b>simdfp</b>&nbsp;SIMD single-precision floating-point (SIMD packed)<br>
   &nbsp;&middot;&nbsp;<b>simdfph</b>&nbsp;SIMD double-precision floating-point horizontal<br>
   &nbsp;&middot;&nbsp;<b>simdfpd</b>&nbsp;SIMD floating-point duplicate<br>
   &nbsp;&middot;&nbsp;<b>cachect</b>&nbsp;cacheability&nbsp;control (only LDDQU)<br>
   &nbsp;&middot;&nbsp;<b>sync</b>&nbsp;agent&nbsp;synchronization<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td><b>tested&nbsp;f</b>
   <td><b>modif&nbsp;f</b>
   <td><b>def&nbsp;f</b>
   <td><b>undef&nbsp;f</b>
   <td>f&nbsp;values
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Tested, Modified, Defined, and Undefined Flags</b><br>
   <i>for the rFlags register:</i><br>
   Marks these flags using case-sensitive <b>o&nbsp;d&nbsp;i&nbsp;s&nbsp;z&nbsp;a&nbsp;p&nbsp;c</b> flag pattern. Present flag fits in with the appropriate group.<br>
   If a flag is upper-case, the flag fits in only under next conditions (e.g. OF in shift&amp;rotate instructions)<br>
   <i>for the x87&nbsp;FPU flags:</i><br>
   Marks these flags using <b>0&nbsp;1&nbsp;2&nbsp;3</b> FPU flag pattern. Present flag fits in with the appropriate group.<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td><b>f&nbsp;values</b>
   <td>description,&nbsp;notes
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Flags&nbsp;Values</b><br>
   <i>for the rFlags register:</i><br>
   Marks the values of flags, which are always set or cleared, using case-sensitive <b>o&nbsp;d&nbsp;i&nbsp;s&nbsp;z&nbsp;a&nbsp;p&nbsp;c</b> flag pattern.<br>
   Lower-case flag means cleared flag, upper-case means set flag.<br>
   <i>for the x87&nbsp;FPU flags:</i><br>
   Marks these flags using <b>0&nbsp;1&nbsp;2&nbsp;3</b> FPU flag pattern. Present flag holds its value.<br>
   <br>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td>p1
   <td>p2
   <td>po
   <td>so
   <td>flds
   <td>mod
   <td>o
   <td>proc
   <td>st
   <td>m
   <td>rl
   <td>l
   <td>mnemonic
   <td>op1
   <td>op2
   <td>op3
   <td>iext
   <td>group1
   <td>group&nbsp;2
   <td>group&nbsp;3
   <td>tested&nbsp;f
   <td>modif&nbsp;f
   <td>def&nbsp;f
   <td>undef&nbsp;f
   <td>f&nbsp;values
   <td><b>description,&nbsp;notes</b>
  </tr>
 </tbody>

 <tbody>
  <tr>
   <td colspan="26">
   <b>Description, Notes</b><br>
   Contains the instruction's general description or some general notes.<br>
   <br>
  </tr>
 </tbody>

</table>

<h2 class="noprint"><a name="browsers">Browsers, and How to Print</a></h2>

<h3 class="noprint">Electronic use</h3>

<ul class="noprint">
<li>Firefox 1.5.0.1: Supports all features of the reference very well and is recommended for browsing this reference.
<li>Internet Explorer 6.0: Doesn't support thick borders and hovering, which are used with each row with an opcode or opcode extension.
<li>Opera 8.53: Doesn't support hovering.
</ul>

<h3 class="noprint">Printing</h3>

<div class="noprint">When printed, all contents, except the main table and its description, disappear by itself. References get decorated and colored as normal text.</div>
<div class="noprint">All of the following browsers support print preview.</div>
<ul class="noprint">
<li>Firefox 1.5.0.1: Is recommended for printing this reference.
<li>Internet Explorer 6.0: Doesn't print the header of the table on next pages. Always removes the backgroud.
<li>Opera 8.53: Doesn't print the header of the table on next pages. Doesn't accept printing setting of the reference's backgroud (retains gray color). And I can't get the table fit to the paper width.
</ul>

</body>
</html>
