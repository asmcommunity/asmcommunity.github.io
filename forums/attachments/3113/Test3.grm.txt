!=====================================================================================
! Strings that end up in the CGT File
!=====================================================================================
"Name"    = 'Grandma'
"Author"  = 'Leith Ketchell'
"Version" = '1.0' 
"About"   = 'An experimental grammar template'
!=====================================================================================

!=====================================================================================
! Parser Settings that end up in the CGT File
!=====================================================================================
"Case Sensitive" = False 
"Start Symbol"   = <Program>
!=====================================================================================

!=====================================================================================
! Terminal Symbols
!=====================================================================================

! String CharSets are defined as any printable character EXCEPT the delimiters (" and ')
{StringChar 1} = {Printable} - ['']	! Theres two because we need to 'escape' for ' char
{StringChar 2} = {Printable} - ["]

! Literal Strings are defined as a subset of the above charsets, with appropriate delimiters
StringLiteral = ''   {StringChar 1}* ''		! any string inside 'these'
              | '"'  {StringChar 2}* '"'		! any string inside "these"

! Literal Numbers are defined as any series of digits, possibly with a decimal point.
NumberLiteral = {Digit}+('.'{Digit}+)?

! Id is defined as any alphanumeric string beginning with a letter.
! These are usually used for naming things, but can mean 'some word i dont know'.
Id            = {Letter}{AlphaNumeric}*

!=====================================================================================
! NONTERMINAL SYMBOLS (REDUCTION RULES)
!=====================================================================================

! This is our 'Start Symbol', where our grammar begins.
! Program is defined as any number of Declarations or Statements.
<Program> ::= <Decls>
	    |  <Statements>

! Declarations include things like function and macro definitions.
<Decls> ::= !We dont have any declaration grammars yet

! Statements is defined as one or more statements.
! Note that we try to put the 'lower order' term furthest to the right.
<Statements> ::= <Statements> <Statement>
              		| <Statement>

!==============================================================================
! Support for IF/ELSEIF/ELSE/ENDIF  and WHILE/ENDW block statements
! DO NOT MODIFY
! Add your statements to <Normal Stm> instead, ok?? :)
<Statement> ::= <Normal Stm>
               | if <Expression>  <Statements> <elseifs> else <Statements> endif
		 | if <Expression>  <Statements> <elseifs> endif
		 | if <Expression>  <Statements> else <Statements> endif
		 | if <Expression>  <Statements> endif
               | while <Expression> <Statements> endw
! One or more ELSEIF blocks
<elseifs> ::= elseif <Expression> <Statements> <elseifs>
	   |  elseif <Expression> <Statements>
!==============================================================================


!==========================================
! Arbitrary statements should be added here
!==========================================
<Normal Stm>  ::= display <Expression>
               |  display <Expression> read ID
		 |  ID <Assign>				! Support for =, +=, -=, *=, /=, and repeat of these
								! This allows expressions like 'x=y+=z*=q=2' etc
<Assign> ::= <Assign> '=' <Expression> 
		 |      '=' <Expression>			! Note how these chain off each other
		 | <Assign Sub> 				! so we can have 'top item', OR ANY UNDER IT
<Assign Sub> ::=  <Assign Sub> '-='<Expression>
		 |           '-='<Expression>
		 | <Assign Add>
<Assign Add> ::=  <Assign Add> '+='<Expression>
		 |           '+='<Expression>
		 | <Assign Mul>
<Assign Mul> ::=  <Assign Mul> '*='<Expression>
		 |           '*='<Expression>
		 | <Assign Div>
<Assign Div> ::=  <Assign Div> '/='<Expression>
		 |           '/='<Expression>



!==============================================================================
 
!  Support for complex expressions
!  Operator Precedence is observed for math operators.
!  Recommended not to modify this

!===============================================
!===============================================

<Expression>::=  <Compare Expr>
		   ! Might add more expression types here
 
<Compare Expr>::=  <Expression> '>'  <Add Exp> 	! Compare
                 | <Expression> '<'  <Add Exp> 
                 | <Expression> '<=' <Add Exp> 
                 | <Expression> '>=' <Add Exp>
                 | <Expression> '==' <Add Exp> 
                 | <Expression> '<>' <Add Exp>
                 | <Add Exp> 

<Add Exp>      ::= <Add Exp> '+' <Mult Exp>		! Add Sub And Or
                 | <Add Exp> '-' <Mult Exp>
                 | <Add Exp> '&' <Mult Exp>
		     |<Add Exp> '|' <Mult Exp>
                 | <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 		! Mul Div
                | <Mult Exp> '/' <Negate Exp> 
                | <Negate Exp> 

<Negate Exp>  ::= '-' <Value> 				! Sign
		   |  <Value> 

!==============================================
! <Value> = ID, Literal or Braced Expression
!==============================================


<Value>       ::=   <SimpleValue>				! Could be a simple Literal value (eg integer, string, float etc)
		    | '(' <Expression> ')'			! Could be a braced (sub)expression (ie nesting support for expressions)
		    | ID '++'					! Could be Name++
		    | ID '--'					! Cound be Name--
		    | ID          				! Could be Name

<SimpleValue> ::=   StringLiteral				! String enclosed in a matched pair of " or ' characters
                  | NumberLiteral				! integer or float (dotted integer), we dont distinguish yet
!================================================================================
