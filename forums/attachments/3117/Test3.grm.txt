!=====================================================================================
! Strings that end up in the CGT File
!=====================================================================================
"Name"    = 'Grandma'
"Author"  = 'Leith Ketchell'
"Version" = '1.0' 
"About"   = 'An experimental grammar template'
!=====================================================================================

!=====================================================================================
! Parser Settings that end up in the CGT File
!=====================================================================================
"Case Sensitive" = False 
"Start Symbol"   = <Program>
!=====================================================================================

!=====================================================================================
! Terminal Symbols
!=====================================================================================

! String CharSets are defined as any printable character EXCEPT the delimiters (" and ')
{StringChar 1} = {Printable} - ['']	! Theres two because we need to 'escape' for ' char
{StringChar 2} = {Printable} - ["]
{Hex Digit}     = {Digit} + [abcdef] + [ABCDEF]    

! Literal Strings are defined as a subset of the above charsets, with appropriate delimiters
StringLiteral = ''   {StringChar 1}* ''		! any string inside 'these'
              | '"'  {StringChar 2}* '"'		! any string inside "these"

! Literal Numbers
IntegerLiteral     = {Digit}+
HexLiteral       = 0x{Hex Digit}+
		   | {Digit}{Hex Digit}*'h'
FloatLiteral     = {Digit}*'.'{Digit}+
		   | {Digit}*'.'{Digit}+ 'f'

! Id is defined as any alphanumeric string beginning with a letter.
! These are usually used for naming things, but can mean 'some word i dont know'.
Id            = {Letter}{AlphaNumeric}*

!=====================================================================================
! NONTERMINAL SYMBOLS (REDUCTION RULES)
!=====================================================================================

! This is our 'Start Symbol', where our grammar begins.
! Program is defined as any number of Declarations or Statements.
<Program> ::= <Decls>
	    |  <Statements>

! Declarations include things like function and macro definitions.
<Decls> ::= !We dont have any declaration grammars yet

! Statements is defined as one or more statements.
! Note that we try to put the 'lower order' term furthest to the right.
<Statements> ::= <Statements> <Statement>
              		| <Statement>

!==============================================================================
! Support for IF/ELSEIF/ELSE/ENDIF  and WHILE/ENDW block statements
! DO NOT MODIFY
! Add your statements to <Normal Stm> instead, ok?? :)
<Statement> ::= <Normal Stm>
		| <IF Stm>
		| <OpCode>

<IF Stm> ::=     if <Expression>  <Statements> <elseifs> else <Statements> endif
		 | if <Expression>  <Statements> <elseifs> endif
		 | if <Expression>  <Statements> else <Statements> endif
		 | if <Expression>  <Statements> endif
               | while <Expression> <Statements> endw
! One or more ELSEIF blocks
<elseifs> ::= elseif <Expression> <Statements> <elseifs>
	   |  elseif <Expression> <Statements>
!==============================================================================


!==========================================
! Arbitrary statements should be added here
!==========================================
<Normal Stm>  ::= display <Expression>
               |  display <Expression> read ID
		 |  <Assignment>				! Support for =, +=, -=, *=, /=, and repeat of these

! Assignments are for defining buildtime equates (literals)

<Assignment> ::=  ID '=' <Expression>
		|   ID 'equ' <Expression>
! 
!<Assign> ::=   '=' <Expression>
!		 | '(' <Expression> ')'
!	 	 |    'equ' <Expression>
!		 |  '+=' <Expression>
!		 |   '-=' <Expression>
!		 |  '*=' <Expression>
!		 |   '/=' <Expression>
!		 |   <SubAssign> 
!
!<SubAssign> ::= <Assign> '+=' <Expression>
!		 | <Assign> '-=' <Expression>
!		 | <Assign> '*=' <Expression>
!		 | <Assign> '/=' <Expression>
!		 | <Assign> '=' <Expression>
!		 | <Assign> 'equ' <Expression>

!==============================================================================
 
!  Support for complex expressions
!  Operator Precedence is observed for math operators.
!  Recommended not to modify this

!===============================================
!===============================================

<Expression>::=  <Assign Expr>
		   ! Might add more expression types here

<Assign Expr> ::=   <Assign Expr> '=' <Compare Expr>
	 	 |   <Assign Expr> 'equ' <Compare Expr>
		 |  <Assign Expr> '+=' <Compare Expr>
		 |   <Assign Expr> '-=' <Compare Expr>
		 |  <Assign Expr> '*=' <Compare Expr>
		 |   <Assign Expr> '/=' <Compare Expr>
		 |   <Compare Expr> 
 
<Compare Expr>::=  <Compare Expr> '>'  <Add Exp> 	! Compare
                 | <Compare Expr> '<'  <Add Exp> 
                 | <Compare Expr> '<=' <Add Exp> 
                 | <Compare Expr> '>=' <Add Exp>
                 | <Compare Expr> '==' <Add Exp> 
                 | <Compare Expr> '<>' <Add Exp>
                 | <Add Exp> 

<Add Exp>      ::= <Add Exp> '+' <Mult Exp>		! Add Sub And Or
                 | <Add Exp> '-' <Mult Exp>
                 | <Add Exp> '&' <Mult Exp>
		     |<Add Exp> '|' <Mult Exp>
                 | <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 		! Mul Div
                | <Mult Exp> '/' <Negate Exp> 
                | <Negate Exp> 




<Negate Exp>  ::= '-' <Value> 				! Sign
		   |  <Value> 


!==============================================
! OPCODES
!==============================================
<OpCode> ::= nop
	  |   mov <Operand> ',' <Operand>
	  |   push <Operand>
	  |   pushad
	  |   popad
         |   pop <Operand>
	  |   ret <NumberLiteral>
	  |   ret


<Operand> ::= <Register> | <NumberLiteral>| Id		!Operands for opcodes

!==============================================
! CPU REGISTERS
!==============================================
<Register> ::= <Reg8> | <Reg16> | <Reg32>
<Reg8>::= AL | CL | DL | BL | AH | CH | DH | BH | R8
<Reg16> ::= AX | CX | DX | BX | SP | BP | SI | DI | R16
<Reg32> ::= EAX | ECX | EDX | EBX | ESP | EBP | ESI | EDI | R32

!==============================================
! <Value> = ID, Literal or Braced Expression
!==============================================


<Value>       ::=   <Literal>				! Could be a simple Literal value (eg integer, string, float etc)
		    | '(' <Expression>  ')'			! Could be a braced (sub)expression (ie nesting support for expressions)
		    | ID '++'					! Could be Name++
		    | ID '--'					! Cound be Name--
		    | ID          				! Could be Name

<Literal> ::=        StringLiteral				! String enclosed in a matched pair of " or ' characters
                  | <NumberLiteral>			! integer or float (dotted integer), we dont distinguish yet

<NumberLiteral>::= IntegerLiteral | FloatLiteral | HexLiteral

!================================================================================
 
